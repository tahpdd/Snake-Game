
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004734  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004840  08004840  00005840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004974  08004974  00006108  2**0
                  CONTENTS
  4 .ARM          00000000  08004974  08004974  00006108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004974  08004974  00006108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004974  08004974  00005974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004978  08004978  00005978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800497c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  20000108  08004a84  00006108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  08004a84  000066d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000792b  00000000  00000000  00006131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a88  00000000  00000000  0000da5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0000f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000672  00000000  00000000  0000fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018257  00000000  00000000  000103ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd2d  00000000  00000000  00028621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084144  00000000  00000000  0003434e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a8c  00000000  00000000  000b84d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000baf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000108 	.word	0x20000108
 8000128:	00000000 	.word	0x00000000
 800012c:	08004828 	.word	0x08004828

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000010c 	.word	0x2000010c
 8000148:	08004828 	.word	0x08004828

0800014c <outputNum>:
	{ 1, 1, 1 },
	{ 0, 0, 1 },
	{ 1, 1, 1 }
};

void outputNum(uint8_t a[5][3], uint8_t posX, uint8_t posY) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
 8000158:	4613      	mov	r3, r2
 800015a:	70bb      	strb	r3, [r7, #2]
	uint8_t maxX = posX + 6;
 800015c:	78fb      	ldrb	r3, [r7, #3]
 800015e:	3306      	adds	r3, #6
 8000160:	72fb      	strb	r3, [r7, #11]
	uint8_t maxY = posY + 12;
 8000162:	78bb      	ldrb	r3, [r7, #2]
 8000164:	330c      	adds	r3, #12
 8000166:	72bb      	strb	r3, [r7, #10]
	uint8_t x = 0, y = 0;
 8000168:	2300      	movs	r3, #0
 800016a:	75fb      	strb	r3, [r7, #23]
 800016c:	2300      	movs	r3, #0
 800016e:	727b      	strb	r3, [r7, #9]
	for (int i = posY; i <= maxY; i += 3) {
 8000170:	78bb      	ldrb	r3, [r7, #2]
 8000172:	613b      	str	r3, [r7, #16]
 8000174:	e020      	b.n	80001b8 <outputNum+0x6c>

		for (int j = posX; j <= maxX; j += 3) {
 8000176:	78fb      	ldrb	r3, [r7, #3]
 8000178:	60fb      	str	r3, [r7, #12]
 800017a:	e016      	b.n	80001aa <outputNum+0x5e>
			SSD1306_DrawRectangle(j, i, 2, 2, a[y][x]);
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	b298      	uxth	r0, r3
 8000180:	693b      	ldr	r3, [r7, #16]
 8000182:	b299      	uxth	r1, r3
 8000184:	7a7a      	ldrb	r2, [r7, #9]
 8000186:	4613      	mov	r3, r2
 8000188:	005b      	lsls	r3, r3, #1
 800018a:	4413      	add	r3, r2
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	441a      	add	r2, r3
 8000190:	7dfb      	ldrb	r3, [r7, #23]
 8000192:	5cd3      	ldrb	r3, [r2, r3]
 8000194:	9300      	str	r3, [sp, #0]
 8000196:	2302      	movs	r3, #2
 8000198:	2202      	movs	r2, #2
 800019a:	f001 fb94 	bl	80018c6 <SSD1306_DrawRectangle>
			x++;
 800019e:	7dfb      	ldrb	r3, [r7, #23]
 80001a0:	3301      	adds	r3, #1
 80001a2:	75fb      	strb	r3, [r7, #23]
		for (int j = posX; j <= maxX; j += 3) {
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	3303      	adds	r3, #3
 80001a8:	60fb      	str	r3, [r7, #12]
 80001aa:	7afb      	ldrb	r3, [r7, #11]
 80001ac:	68fa      	ldr	r2, [r7, #12]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	dde4      	ble.n	800017c <outputNum+0x30>
	for (int i = posY; i <= maxY; i += 3) {
 80001b2:	693b      	ldr	r3, [r7, #16]
 80001b4:	3303      	adds	r3, #3
 80001b6:	613b      	str	r3, [r7, #16]
 80001b8:	7abb      	ldrb	r3, [r7, #10]
 80001ba:	693a      	ldr	r2, [r7, #16]
 80001bc:	429a      	cmp	r2, r3
 80001be:	ddda      	ble.n	8000176 <outputNum+0x2a>
		}
	}



}
 80001c0:	bf00      	nop
 80001c2:	bf00      	nop
 80001c4:	3718      	adds	r7, #24
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
	...

080001cc <outputResult>:
void outputResult(int a, int b, uint8_t posX, uint8_t posY) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	60b9      	str	r1, [r7, #8]
 80001d6:	4611      	mov	r1, r2
 80001d8:	461a      	mov	r2, r3
 80001da:	460b      	mov	r3, r1
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	4613      	mov	r3, r2
 80001e0:	71bb      	strb	r3, [r7, #6]
	switch (a) {
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2b09      	cmp	r3, #9
 80001e6:	d85d      	bhi.n	80002a4 <outputResult+0xd8>
 80001e8:	a201      	add	r2, pc, #4	@ (adr r2, 80001f0 <outputResult+0x24>)
 80001ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ee:	bf00      	nop
 80001f0:	08000227 	.word	0x08000227
 80001f4:	08000219 	.word	0x08000219
 80001f8:	08000235 	.word	0x08000235
 80001fc:	08000243 	.word	0x08000243
 8000200:	08000251 	.word	0x08000251
 8000204:	0800025f 	.word	0x0800025f
 8000208:	0800026d 	.word	0x0800026d
 800020c:	0800027b 	.word	0x0800027b
 8000210:	08000289 	.word	0x08000289
 8000214:	08000297 	.word	0x08000297
	case 1:
		outputNum(one, posX, posY);
 8000218:	79ba      	ldrb	r2, [r7, #6]
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4619      	mov	r1, r3
 800021e:	4855      	ldr	r0, [pc, #340]	@ (8000374 <outputResult+0x1a8>)
 8000220:	f7ff ff94 	bl	800014c <outputNum>
		break;
 8000224:	e03e      	b.n	80002a4 <outputResult+0xd8>
	case 0:
		outputNum(zero, posX, posY);
 8000226:	79ba      	ldrb	r2, [r7, #6]
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4619      	mov	r1, r3
 800022c:	4852      	ldr	r0, [pc, #328]	@ (8000378 <outputResult+0x1ac>)
 800022e:	f7ff ff8d 	bl	800014c <outputNum>
		break;
 8000232:	e037      	b.n	80002a4 <outputResult+0xd8>
	case 2:
		outputNum(two, posX, posY);
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4619      	mov	r1, r3
 800023a:	4850      	ldr	r0, [pc, #320]	@ (800037c <outputResult+0x1b0>)
 800023c:	f7ff ff86 	bl	800014c <outputNum>
		break;
 8000240:	e030      	b.n	80002a4 <outputResult+0xd8>
	case 3:
		outputNum(three, posX, posY);
 8000242:	79ba      	ldrb	r2, [r7, #6]
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	4619      	mov	r1, r3
 8000248:	484d      	ldr	r0, [pc, #308]	@ (8000380 <outputResult+0x1b4>)
 800024a:	f7ff ff7f 	bl	800014c <outputNum>
		break;
 800024e:	e029      	b.n	80002a4 <outputResult+0xd8>
	case 4:
		outputNum(four, posX, posY);
 8000250:	79ba      	ldrb	r2, [r7, #6]
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	4619      	mov	r1, r3
 8000256:	484b      	ldr	r0, [pc, #300]	@ (8000384 <outputResult+0x1b8>)
 8000258:	f7ff ff78 	bl	800014c <outputNum>
		break;
 800025c:	e022      	b.n	80002a4 <outputResult+0xd8>
	case 5:
		outputNum(five, posX, posY);
 800025e:	79ba      	ldrb	r2, [r7, #6]
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	4619      	mov	r1, r3
 8000264:	4848      	ldr	r0, [pc, #288]	@ (8000388 <outputResult+0x1bc>)
 8000266:	f7ff ff71 	bl	800014c <outputNum>
		break;
 800026a:	e01b      	b.n	80002a4 <outputResult+0xd8>
	case 6:
		outputNum(six, posX, posY);
 800026c:	79ba      	ldrb	r2, [r7, #6]
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	4619      	mov	r1, r3
 8000272:	4846      	ldr	r0, [pc, #280]	@ (800038c <outputResult+0x1c0>)
 8000274:	f7ff ff6a 	bl	800014c <outputNum>
		break;
 8000278:	e014      	b.n	80002a4 <outputResult+0xd8>
	case 7:
		outputNum(seven, posX, posY);
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4619      	mov	r1, r3
 8000280:	4843      	ldr	r0, [pc, #268]	@ (8000390 <outputResult+0x1c4>)
 8000282:	f7ff ff63 	bl	800014c <outputNum>
		break;
 8000286:	e00d      	b.n	80002a4 <outputResult+0xd8>
	case 8:
		outputNum(eight, posX, posY);
 8000288:	79ba      	ldrb	r2, [r7, #6]
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4619      	mov	r1, r3
 800028e:	4841      	ldr	r0, [pc, #260]	@ (8000394 <outputResult+0x1c8>)
 8000290:	f7ff ff5c 	bl	800014c <outputNum>
		break;
 8000294:	e006      	b.n	80002a4 <outputResult+0xd8>
	case 9:
		outputNum(nine, posX, posY);
 8000296:	79ba      	ldrb	r2, [r7, #6]
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	4619      	mov	r1, r3
 800029c:	483e      	ldr	r0, [pc, #248]	@ (8000398 <outputResult+0x1cc>)
 800029e:	f7ff ff55 	bl	800014c <outputNum>
		break;
 80002a2:	bf00      	nop
	}
	posX += 12;
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	330c      	adds	r3, #12
 80002a8:	71fb      	strb	r3, [r7, #7]
	switch (b) {
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	2b09      	cmp	r3, #9
 80002ae:	d85d      	bhi.n	800036c <outputResult+0x1a0>
 80002b0:	a201      	add	r2, pc, #4	@ (adr r2, 80002b8 <outputResult+0xec>)
 80002b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b6:	bf00      	nop
 80002b8:	080002ef 	.word	0x080002ef
 80002bc:	080002e1 	.word	0x080002e1
 80002c0:	080002fd 	.word	0x080002fd
 80002c4:	0800030b 	.word	0x0800030b
 80002c8:	08000319 	.word	0x08000319
 80002cc:	08000327 	.word	0x08000327
 80002d0:	08000335 	.word	0x08000335
 80002d4:	08000343 	.word	0x08000343
 80002d8:	08000351 	.word	0x08000351
 80002dc:	0800035f 	.word	0x0800035f
	case 1:
		outputNum(one, posX, posY);
 80002e0:	79ba      	ldrb	r2, [r7, #6]
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4619      	mov	r1, r3
 80002e6:	4823      	ldr	r0, [pc, #140]	@ (8000374 <outputResult+0x1a8>)
 80002e8:	f7ff ff30 	bl	800014c <outputNum>
		break;
 80002ec:	e03e      	b.n	800036c <outputResult+0x1a0>
	case 0:
		outputNum(zero, posX, posY);
 80002ee:	79ba      	ldrb	r2, [r7, #6]
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4820      	ldr	r0, [pc, #128]	@ (8000378 <outputResult+0x1ac>)
 80002f6:	f7ff ff29 	bl	800014c <outputNum>
		break;
 80002fa:	e037      	b.n	800036c <outputResult+0x1a0>
	case 2:
		outputNum(two, posX, posY);
 80002fc:	79ba      	ldrb	r2, [r7, #6]
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	4619      	mov	r1, r3
 8000302:	481e      	ldr	r0, [pc, #120]	@ (800037c <outputResult+0x1b0>)
 8000304:	f7ff ff22 	bl	800014c <outputNum>
		break;
 8000308:	e030      	b.n	800036c <outputResult+0x1a0>
	case 3:
		outputNum(three, posX, posY);
 800030a:	79ba      	ldrb	r2, [r7, #6]
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4619      	mov	r1, r3
 8000310:	481b      	ldr	r0, [pc, #108]	@ (8000380 <outputResult+0x1b4>)
 8000312:	f7ff ff1b 	bl	800014c <outputNum>
		break;
 8000316:	e029      	b.n	800036c <outputResult+0x1a0>
	case 4:
		outputNum(four, posX, posY);
 8000318:	79ba      	ldrb	r2, [r7, #6]
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	4619      	mov	r1, r3
 800031e:	4819      	ldr	r0, [pc, #100]	@ (8000384 <outputResult+0x1b8>)
 8000320:	f7ff ff14 	bl	800014c <outputNum>
		break;
 8000324:	e022      	b.n	800036c <outputResult+0x1a0>
	case 5:
		outputNum(five, posX, posY);
 8000326:	79ba      	ldrb	r2, [r7, #6]
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4619      	mov	r1, r3
 800032c:	4816      	ldr	r0, [pc, #88]	@ (8000388 <outputResult+0x1bc>)
 800032e:	f7ff ff0d 	bl	800014c <outputNum>
		break;
 8000332:	e01b      	b.n	800036c <outputResult+0x1a0>
	case 6:
		outputNum(six, posX, posY);
 8000334:	79ba      	ldrb	r2, [r7, #6]
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	4619      	mov	r1, r3
 800033a:	4814      	ldr	r0, [pc, #80]	@ (800038c <outputResult+0x1c0>)
 800033c:	f7ff ff06 	bl	800014c <outputNum>
		break;
 8000340:	e014      	b.n	800036c <outputResult+0x1a0>
	case 7:
		outputNum(seven, posX, posY);
 8000342:	79ba      	ldrb	r2, [r7, #6]
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	4619      	mov	r1, r3
 8000348:	4811      	ldr	r0, [pc, #68]	@ (8000390 <outputResult+0x1c4>)
 800034a:	f7ff feff 	bl	800014c <outputNum>
		break;
 800034e:	e00d      	b.n	800036c <outputResult+0x1a0>
	case 8:
		outputNum(eight, posX, posY);
 8000350:	79ba      	ldrb	r2, [r7, #6]
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	4619      	mov	r1, r3
 8000356:	480f      	ldr	r0, [pc, #60]	@ (8000394 <outputResult+0x1c8>)
 8000358:	f7ff fef8 	bl	800014c <outputNum>
		break;
 800035c:	e006      	b.n	800036c <outputResult+0x1a0>
	case 9:
		outputNum(nine, posX, posY);
 800035e:	79ba      	ldrb	r2, [r7, #6]
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	4619      	mov	r1, r3
 8000364:	480c      	ldr	r0, [pc, #48]	@ (8000398 <outputResult+0x1cc>)
 8000366:	f7ff fef1 	bl	800014c <outputNum>
		break;
 800036a:	bf00      	nop
	}
}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000010 	.word	0x20000010
 8000378:	20000000 	.word	0x20000000
 800037c:	20000020 	.word	0x20000020
 8000380:	20000040 	.word	0x20000040
 8000384:	20000030 	.word	0x20000030
 8000388:	20000050 	.word	0x20000050
 800038c:	20000060 	.word	0x20000060
 8000390:	20000070 	.word	0x20000070
 8000394:	20000080 	.word	0x20000080
 8000398:	20000090 	.word	0x20000090

0800039c <updateSnake>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);



void updateSnake(struct snake *s, int snakeLen) {
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	6039      	str	r1, [r7, #0]
	for (int i = snakeLen - 1; i > 0; i--) {
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	3b01      	subs	r3, #1
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	e01c      	b.n	80003e8 <updateSnake+0x4c>
    	s[i].x = s[i - 1].x;
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80003b4:	3b01      	subs	r3, #1
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	441a      	add	r2, r3
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	6879      	ldr	r1, [r7, #4]
 80003c2:	440b      	add	r3, r1
 80003c4:	7812      	ldrb	r2, [r2, #0]
 80003c6:	701a      	strb	r2, [r3, #0]
    	s[i].y = s[i - 1].y;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80003ce:	3b01      	subs	r3, #1
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	441a      	add	r2, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	6879      	ldr	r1, [r7, #4]
 80003dc:	440b      	add	r3, r1
 80003de:	7852      	ldrb	r2, [r2, #1]
 80003e0:	705a      	strb	r2, [r3, #1]
	for (int i = snakeLen - 1; i > 0; i--) {
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	dcdf      	bgt.n	80003ae <updateSnake+0x12>
	}
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr

080003fa <checkColli>:

int checkColli(struct snake *s, int snakeLen, int x, int y) {
 80003fa:	b480      	push	{r7}
 80003fc:	b087      	sub	sp, #28
 80003fe:	af00      	add	r7, sp, #0
 8000400:	60f8      	str	r0, [r7, #12]
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	603b      	str	r3, [r7, #0]
	for (int i = 1; i < snakeLen; i++) {
 8000408:	2301      	movs	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	e01f      	b.n	800044e <checkColli+0x54>
		int temp = s[0].x + x;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	461a      	mov	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4413      	add	r3, r2
 8000418:	613b      	str	r3, [r7, #16]
		if (temp == s[i].x && s[0].y + y == s[i].y) {
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	4413      	add	r3, r2
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	4293      	cmp	r3, r2
 800042a:	d10d      	bne.n	8000448 <checkColli+0x4e>
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	785b      	ldrb	r3, [r3, #1]
 8000430:	461a      	mov	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	4413      	add	r3, r2
 8000436:	697a      	ldr	r2, [r7, #20]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	68f9      	ldr	r1, [r7, #12]
 800043c:	440a      	add	r2, r1
 800043e:	7852      	ldrb	r2, [r2, #1]
 8000440:	4293      	cmp	r3, r2
 8000442:	d101      	bne.n	8000448 <checkColli+0x4e>
			return 1;
 8000444:	2301      	movs	r3, #1
 8000446:	e007      	b.n	8000458 <checkColli+0x5e>
	for (int i = 1; i < snakeLen; i++) {
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	3301      	adds	r3, #1
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	697a      	ldr	r2, [r7, #20]
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	429a      	cmp	r2, r3
 8000454:	dbdb      	blt.n	800040e <checkColli+0x14>
		}
	}
	return 0;
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	371c      	adds	r7, #28
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
	...

08000464 <end>:

void end(int snakeLen){
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af02      	add	r7, sp, #8
 800046a:	6078      	str	r0, [r7, #4]
	SSD1306_DrawFilledRectangle(51, 12, 26, 20, 0);
 800046c:	2300      	movs	r3, #0
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	2314      	movs	r3, #20
 8000472:	221a      	movs	r2, #26
 8000474:	210c      	movs	r1, #12
 8000476:	2033      	movs	r0, #51	@ 0x33
 8000478:	f001 fa8f 	bl	800199a <SSD1306_DrawFilledRectangle>
	SSD1306_DrawRectangle(51, 12, 26, 20, 1);
 800047c:	2301      	movs	r3, #1
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2314      	movs	r3, #20
 8000482:	221a      	movs	r2, #26
 8000484:	210c      	movs	r1, #12
 8000486:	2033      	movs	r0, #51	@ 0x33
 8000488:	f001 fa1d 	bl	80018c6 <SSD1306_DrawRectangle>
	int fn = snakeLen / 10;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a0f      	ldr	r2, [pc, #60]	@ (80004cc <end+0x68>)
 8000490:	fb82 1203 	smull	r1, r2, r2, r3
 8000494:	1092      	asrs	r2, r2, #2
 8000496:	17db      	asrs	r3, r3, #31
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	60fb      	str	r3, [r7, #12]
	int sn = snakeLen % 10;
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <end+0x68>)
 80004a0:	fb83 1302 	smull	r1, r3, r3, r2
 80004a4:	1099      	asrs	r1, r3, #2
 80004a6:	17d3      	asrs	r3, r2, #31
 80004a8:	1ac9      	subs	r1, r1, r3
 80004aa:	460b      	mov	r3, r1
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	440b      	add	r3, r1
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	60bb      	str	r3, [r7, #8]

	outputResult(fn, sn, 54, 15);
 80004b6:	230f      	movs	r3, #15
 80004b8:	2236      	movs	r2, #54	@ 0x36
 80004ba:	68b9      	ldr	r1, [r7, #8]
 80004bc:	68f8      	ldr	r0, [r7, #12]
 80004be:	f7ff fe85 	bl	80001cc <outputResult>
	SSD1306_UpdateScreen();
 80004c2:	f001 f861 	bl	8001588 <SSD1306_UpdateScreen>
	while (1) {}
 80004c6:	bf00      	nop
 80004c8:	e7fd      	b.n	80004c6 <end+0x62>
 80004ca:	bf00      	nop
 80004cc:	66666667 	.word	0x66666667

080004d0 <main>:
}


int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b0c4      	sub	sp, #272	@ 0x110
 80004d4:	af02      	add	r7, sp, #8
	HAL_Init();
 80004d6:	f001 fcc5 	bl	8001e64 <HAL_Init>
	SystemClock_Config();
 80004da:	f000 fe3b 	bl	8001154 <SystemClock_Config>
	MX_GPIO_Init();
 80004de:	f000 fead 	bl	800123c <MX_GPIO_Init>
	MX_I2C1_Init();
 80004e2:	f000 fe7d 	bl	80011e0 <MX_I2C1_Init>

	SSD1306_Init();
 80004e6:	f000 ff91 	bl	800140c <SSD1306_Init>

	// Draw the playground
	SSD1306_DrawLine(124,0,124,63,1);   // right
 80004ea:	2301      	movs	r3, #1
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	233f      	movs	r3, #63	@ 0x3f
 80004f0:	227c      	movs	r2, #124	@ 0x7c
 80004f2:	2100      	movs	r1, #0
 80004f4:	207c      	movs	r0, #124	@ 0x7c
 80004f6:	f001 f8eb 	bl	80016d0 <SSD1306_DrawLine>
	SSD1306_DrawLine(0,0,0,63,1);     // left
 80004fa:	2301      	movs	r3, #1
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	233f      	movs	r3, #63	@ 0x3f
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	2000      	movs	r0, #0
 8000506:	f001 f8e3 	bl	80016d0 <SSD1306_DrawLine>
	SSD1306_DrawLine(0,61,127,61,1); // down
 800050a:	2301      	movs	r3, #1
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	233d      	movs	r3, #61	@ 0x3d
 8000510:	227f      	movs	r2, #127	@ 0x7f
 8000512:	213d      	movs	r1, #61	@ 0x3d
 8000514:	2000      	movs	r0, #0
 8000516:	f001 f8db 	bl	80016d0 <SSD1306_DrawLine>
	SSD1306_DrawLine(0,0,127,0,1);  // up
 800051a:	2301      	movs	r3, #1
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2300      	movs	r3, #0
 8000520:	227f      	movs	r2, #127	@ 0x7f
 8000522:	2100      	movs	r1, #0
 8000524:	2000      	movs	r0, #0
 8000526:	f001 f8d3 	bl	80016d0 <SSD1306_DrawLine>

	SSD1306_UpdateScreen();
 800052a:	f001 f82d 	bl	8001588 <SSD1306_UpdateScreen>

	uint8_t count = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	int snakeLen = 4;
 8000534:	2304      	movs	r3, #4
 8000536:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	uint8_t delay = 150;
 800053a:	2396      	movs	r3, #150	@ 0x96
 800053c:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3

	struct snake s[100];

	// snake init
	for (int i = 0; i < snakeLen; i++) {
 8000540:	2300      	movs	r3, #0
 8000542:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000546:	e01f      	b.n	8000588 <main+0xb8>
		s[i].x = (128/2) + 3*i;
 8000548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800054c:	b2db      	uxtb	r3, r3
 800054e:	461a      	mov	r2, r3
 8000550:	0052      	lsls	r2, r2, #1
 8000552:	4413      	add	r3, r2
 8000554:	b2db      	uxtb	r3, r3
 8000556:	3340      	adds	r3, #64	@ 0x40
 8000558:	b2d9      	uxtb	r1, r3
 800055a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800055e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000562:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8000566:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		s[i].y = 62 / 2;
 800056a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800056e:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8000572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	4413      	add	r3, r2
 800057a:	221f      	movs	r2, #31
 800057c:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < snakeLen; i++) {
 800057e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000582:	3301      	adds	r3, #1
 8000584:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000588:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800058c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000590:	429a      	cmp	r2, r3
 8000592:	dbd9      	blt.n	8000548 <main+0x78>
	}

	// output snake
	for (int i = 0; i < snakeLen; i++) {
 8000594:	2300      	movs	r3, #0
 8000596:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800059a:	e01d      	b.n	80005d8 <main+0x108>
		SSD1306_DrawRectangle(s[i].x, s[i].y, 2, 2, 1);
 800059c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80005a4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80005a8:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005b2:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 80005b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	4413      	add	r3, r2
 80005be:	785b      	ldrb	r3, [r3, #1]
 80005c0:	4619      	mov	r1, r3
 80005c2:	2301      	movs	r3, #1
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2302      	movs	r3, #2
 80005c8:	2202      	movs	r2, #2
 80005ca:	f001 f97c 	bl	80018c6 <SSD1306_DrawRectangle>
	for (int i = 0; i < snakeLen; i++) {
 80005ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80005d2:	3301      	adds	r3, #1
 80005d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80005d8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80005dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbdb      	blt.n	800059c <main+0xcc>
	}

	// output fruit
	uint8_t fruitX = 7;
 80005e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005e8:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80005ec:	2207      	movs	r2, #7
 80005ee:	701a      	strb	r2, [r3, #0]
	uint8_t fruitY = 4;
 80005f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005f4:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 80005f8:	2204      	movs	r2, #4
 80005fa:	701a      	strb	r2, [r3, #0]
	SSD1306_DrawRectangle(fruitX, fruitY, 2, 2, 1);
 80005fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000600:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800060c:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	2301      	movs	r3, #1
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2302      	movs	r3, #2
 800061a:	2202      	movs	r2, #2
 800061c:	f001 f953 	bl	80018c6 <SSD1306_DrawRectangle>

	SSD1306_UpdateScreen();
 8000620:	f000 ffb2 	bl	8001588 <SSD1306_UpdateScreen>
	uint8_t l = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
	uint8_t r = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
	uint8_t u = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
	uint8_t d = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4

	while (1) {
		// move left, s[0] = head
		if (l == 1) {
 800063c:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8000640:	2b01      	cmp	r3, #1
 8000642:	f040 815b 	bne.w	80008fc <main+0x42c>
			while ( l == 1 ) {
 8000646:	e153      	b.n	80008f0 <main+0x420>

				if (checkColli(s, snakeLen, -3, 0) == 1) {
 8000648:	f107 0008 	add.w	r0, r7, #8
 800064c:	2300      	movs	r3, #0
 800064e:	f06f 0202 	mvn.w	r2, #2
 8000652:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000656:	f7ff fed0 	bl	80003fa <checkColli>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d105      	bne.n	800066c <main+0x19c>
					end( snakeLen);
 8000660:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8000664:	f7ff fefe 	bl	8000464 <end>
					break;
 8000668:	f000 bd70 	b.w	800114c <main+0xc7c>

				}
				if ( s[0].x == fruitX + 3 && s[0].y == fruitY) {
 800066c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000670:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800067c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3303      	adds	r3, #3
 8000684:	429a      	cmp	r2, r3
 8000686:	d143      	bne.n	8000710 <main+0x240>
 8000688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800068c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000690:	785a      	ldrb	r2, [r3, #1]
 8000692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000696:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	d137      	bne.n	8000710 <main+0x240>
					snakeLen++;
 80006a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80006a4:	3301      	adds	r3, #1
 80006a6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
					s[snakeLen - 1].x = s[snakeLen - 2].x + 3;
 80006aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80006ae:	1e9a      	subs	r2, r3, #2
 80006b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006b8:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80006bc:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80006c0:	3a01      	subs	r2, #1
 80006c2:	3303      	adds	r3, #3
 80006c4:	b2d9      	uxtb	r1, r3
 80006c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006ca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006ce:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
					s[snakeLen - 1].y = s[snakeLen - 2].y;
 80006d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80006d6:	3b02      	subs	r3, #2
 80006d8:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80006dc:	1e51      	subs	r1, r2, #1
 80006de:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80006e2:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	7858      	ldrb	r0, [r3, #1]
 80006ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006f0:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 80006f4:	004b      	lsls	r3, r1, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	4602      	mov	r2, r0
 80006fa:	705a      	strb	r2, [r3, #1]

					NewFruit(s, snakeLen, &fruitX, &fruitY);
 80006fc:	1dbb      	adds	r3, r7, #6
 80006fe:	1dfa      	adds	r2, r7, #7
 8000700:	f107 0008 	add.w	r0, r7, #8
 8000704:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000708:	f000 fde0 	bl	80012cc <NewFruit>
					SSD1306_UpdateScreen();
 800070c:	f000 ff3c 	bl	8001588 <SSD1306_UpdateScreen>
				}
				if ( s[0].x == 1) {
 8000710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000714:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d16f      	bne.n	80007fe <main+0x32e>
					uint8_t lastX = s[snakeLen - 1].x;
 800071e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000728:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800072c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000730:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
					uint8_t lastY = s[snakeLen - 1].y;
 8000734:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000738:	3b01      	subs	r3, #1
 800073a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800073e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 800074c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8000750:	b298      	uxth	r0, r3
 8000752:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8000756:	b299      	uxth	r1, r3
 8000758:	2300      	movs	r3, #0
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2302      	movs	r3, #2
 800075e:	2202      	movs	r2, #2
 8000760:	f001 f8b1 	bl	80018c6 <SSD1306_DrawRectangle>
					updateSnake(s, snakeLen);
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe15 	bl	800039c <updateSnake>
					s[0].x = 121;
 8000772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000776:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800077a:	2279      	movs	r2, #121	@ 0x79
 800077c:	701a      	strb	r2, [r3, #0]
					s[0].y = s[0].y;
 800077e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000782:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000786:	785a      	ldrb	r2, [r3, #1]
 8000788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800078c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000790:	705a      	strb	r2, [r3, #1]

					lastX = s[snakeLen - 1].x;
 8000792:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000796:	1e5a      	subs	r2, r3, #1
 8000798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800079c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007a0:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80007a4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
					lastY = s[snakeLen - 1].y;
 80007a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80007ac:	3b01      	subs	r3, #1
 80007ae:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80007b2:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	785b      	ldrb	r3, [r3, #1]
 80007bc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

					SSD1306_DrawRectangle(s[0].x, s[0].y, 2, 2, 1);
 80007c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007d4:	785b      	ldrb	r3, [r3, #1]
 80007d6:	4619      	mov	r1, r3
 80007d8:	2301      	movs	r3, #1
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2302      	movs	r3, #2
 80007de:	2202      	movs	r2, #2
 80007e0:	f001 f871 	bl	80018c6 <SSD1306_DrawRectangle>
					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 80007e4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80007e8:	b298      	uxth	r0, r3
 80007ea:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 80007ee:	b299      	uxth	r1, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2302      	movs	r3, #2
 80007f6:	2202      	movs	r2, #2
 80007f8:	f001 f865 	bl	80018c6 <SSD1306_DrawRectangle>
 80007fc:	e04e      	b.n	800089c <main+0x3cc>
				}
				else {
					uint8_t lastX = s[snakeLen - 1].x;
 80007fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000802:	1e5a      	subs	r2, r3, #1
 8000804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000808:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800080c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000810:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5
					uint8_t lastY = s[snakeLen - 1].y;
 8000814:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000818:	3b01      	subs	r3, #1
 800081a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800081e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4413      	add	r3, r2
 8000826:	785b      	ldrb	r3, [r3, #1]
 8000828:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
					updateSnake(s, snakeLen);
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fdb1 	bl	800039c <updateSnake>
					s[0].x -= 3;
 800083a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800083e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	3b03      	subs	r3, #3
 8000846:	b2da      	uxtb	r2, r3
 8000848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800084c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000850:	701a      	strb	r2, [r3, #0]


					SSD1306_DrawRectangle(s[0].x, s[0].y, 2, 2, 1);
 8000852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000856:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000862:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000866:	785b      	ldrb	r3, [r3, #1]
 8000868:	4619      	mov	r1, r3
 800086a:	2301      	movs	r3, #1
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2302      	movs	r3, #2
 8000870:	2202      	movs	r2, #2
 8000872:	f001 f828 	bl	80018c6 <SSD1306_DrawRectangle>
					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 8000876:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 800087a:	b298      	uxth	r0, r3
 800087c:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8000880:	b299      	uxth	r1, r3
 8000882:	2300      	movs	r3, #0
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2302      	movs	r3, #2
 8000888:	2202      	movs	r2, #2
 800088a:	f001 f81c 	bl	80018c6 <SSD1306_DrawRectangle>

					SSD1306_UpdateScreen();
 800088e:	f000 fe7b 	bl	8001588 <SSD1306_UpdateScreen>
					HAL_Delay(delay);
 8000892:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fb46 	bl	8001f28 <HAL_Delay>
				}
				// check up and down
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1) {
 800089c:	2104      	movs	r1, #4
 800089e:	48cc      	ldr	r0, [pc, #816]	@ (8000bd0 <main+0x700>)
 80008a0:	f001 fdce 	bl	8002440 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10d      	bne.n	80008c6 <main+0x3f6>
					l = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
					d = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
					r = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
					u = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5

					break;
 80008c2:	f000 bc43 	b.w	800114c <main+0xc7c>
				}
				else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 80008c6:	2108      	movs	r1, #8
 80008c8:	48c1      	ldr	r0, [pc, #772]	@ (8000bd0 <main+0x700>)
 80008ca:	f001 fdb9 	bl	8002440 <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d10d      	bne.n	80008f0 <main+0x420>
					l = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
					u = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
					r = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
					d = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4

					break;
 80008ec:	f000 bc2e 	b.w	800114c <main+0xc7c>
			while ( l == 1 ) {
 80008f0:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	f43f aea7 	beq.w	8000648 <main+0x178>
 80008fa:	e69f      	b.n	800063c <main+0x16c>
				}

			}
		}
		else if (u == 1) {
 80008fc:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 8000900:	2b01      	cmp	r3, #1
 8000902:	f040 815e 	bne.w	8000bc2 <main+0x6f2>
			// move up, s[0] = head
			while ( u == 1 ) {
 8000906:	e156      	b.n	8000bb6 <main+0x6e6>

				if (checkColli(s, snakeLen, 0, -3) == 1) {
 8000908:	f107 0008 	add.w	r0, r7, #8
 800090c:	f06f 0302 	mvn.w	r3, #2
 8000910:	2200      	movs	r2, #0
 8000912:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000916:	f7ff fd70 	bl	80003fa <checkColli>
 800091a:	4603      	mov	r3, r0
 800091c:	2b01      	cmp	r3, #1
 800091e:	d105      	bne.n	800092c <main+0x45c>
					end( snakeLen);
 8000920:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8000924:	f7ff fd9e 	bl	8000464 <end>
					break;
 8000928:	f000 bc10 	b.w	800114c <main+0xc7c>

				}
				if ( s[0].y == fruitY + 3 && s[0].x == fruitX) {
 800092c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000930:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000934:	785b      	ldrb	r3, [r3, #1]
 8000936:	461a      	mov	r2, r3
 8000938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800093c:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	3303      	adds	r3, #3
 8000944:	429a      	cmp	r2, r3
 8000946:	d143      	bne.n	80009d0 <main+0x500>
 8000948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800094c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000950:	781a      	ldrb	r2, [r3, #0]
 8000952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000956:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d137      	bne.n	80009d0 <main+0x500>
					snakeLen++;
 8000960:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000964:	3301      	adds	r3, #1
 8000966:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
					s[snakeLen - 1].x = s[snakeLen - 2].x;
 800096a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800096e:	1e99      	subs	r1, r3, #2
 8000970:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000974:	1e5a      	subs	r2, r3, #1
 8000976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800097a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800097e:	f813 1011 	ldrb.w	r1, [r3, r1, lsl #1]
 8000982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000986:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800098a:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
					s[snakeLen - 1].y = s[snakeLen - 2].y + 3;
 800098e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000992:	3b02      	subs	r3, #2
 8000994:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000998:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	4413      	add	r3, r2
 80009a0:	785a      	ldrb	r2, [r3, #1]
 80009a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80009a6:	3b01      	subs	r3, #1
 80009a8:	3203      	adds	r2, #3
 80009aa:	b2d1      	uxtb	r1, r2
 80009ac:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80009b0:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	460a      	mov	r2, r1
 80009ba:	705a      	strb	r2, [r3, #1]

					NewFruit(s, snakeLen, &fruitX, &fruitY);
 80009bc:	1dbb      	adds	r3, r7, #6
 80009be:	1dfa      	adds	r2, r7, #7
 80009c0:	f107 0008 	add.w	r0, r7, #8
 80009c4:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 80009c8:	f000 fc80 	bl	80012cc <NewFruit>
					SSD1306_UpdateScreen();
 80009cc:	f000 fddc 	bl	8001588 <SSD1306_UpdateScreen>
				}
				if ( s[0].y == 1 ) {
 80009d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009d8:	785b      	ldrb	r3, [r3, #1]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d16f      	bne.n	8000abe <main+0x5ee>
					uint8_t lastX = s[snakeLen - 1].x;
 80009de:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80009e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009ec:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80009f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
					uint8_t lastY = s[snakeLen - 1].y;
 80009f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80009f8:	3b01      	subs	r3, #1
 80009fa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80009fe:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6

					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 8000a0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000a10:	b298      	uxth	r0, r3
 8000a12:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8000a16:	b299      	uxth	r1, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	2202      	movs	r2, #2
 8000a20:	f000 ff51 	bl	80018c6 <SSD1306_DrawRectangle>
					updateSnake(s, snakeLen);
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fcb5 	bl	800039c <updateSnake>
					s[0].x = s[0].x;
 8000a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a36:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a40:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a44:	701a      	strb	r2, [r3, #0]
					s[0].y = 58;
 8000a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a4a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a4e:	223a      	movs	r2, #58	@ 0x3a
 8000a50:	705a      	strb	r2, [r3, #1]

					lastX = s[snakeLen - 1].x;
 8000a52:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a5c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a60:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000a64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
					lastY = s[snakeLen - 1].y;
 8000a68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000a72:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	785b      	ldrb	r3, [r3, #1]
 8000a7c:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6

					SSD1306_DrawRectangle(s[0].x, s[0].y, 2, 2, 1);
 8000a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000a90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	4619      	mov	r1, r3
 8000a98:	2301      	movs	r3, #1
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	f000 ff11 	bl	80018c6 <SSD1306_DrawRectangle>
					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 8000aa4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000aa8:	b298      	uxth	r0, r3
 8000aaa:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8000aae:	b299      	uxth	r1, r3
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	f000 ff05 	bl	80018c6 <SSD1306_DrawRectangle>
 8000abc:	e053      	b.n	8000b66 <main+0x696>
				}
				else {
					int lastX = s[snakeLen - 1].x;
 8000abe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000ac2:	1e5a      	subs	r2, r3, #1
 8000ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ac8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000acc:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000ad0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
					int lastY = s[snakeLen - 1].y;
 8000ad4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000ade:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	785b      	ldrb	r3, [r3, #1]
 8000ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
					updateSnake(s, snakeLen);
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fc51 	bl	800039c <updateSnake>

					s[0].y -= 3;
 8000afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000afe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b02:	785b      	ldrb	r3, [r3, #1]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b10:	705a      	strb	r2, [r3, #1]

					SSD1306_DrawRectangle(s[0].x, s[0].y, 2, 2, 1);
 8000b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b16:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b26:	785b      	ldrb	r3, [r3, #1]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2302      	movs	r3, #2
 8000b30:	2202      	movs	r2, #2
 8000b32:	f000 fec8 	bl	80018c6 <SSD1306_DrawRectangle>
					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 8000b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000b3a:	b298      	uxth	r0, r3
 8000b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000b40:	b299      	uxth	r1, r3
 8000b42:	2300      	movs	r3, #0
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2302      	movs	r3, #2
 8000b48:	2202      	movs	r2, #2
 8000b4a:	f000 febc 	bl	80018c6 <SSD1306_DrawRectangle>

					SSD1306_UpdateScreen();
 8000b4e:	f000 fd1b 	bl	8001588 <SSD1306_UpdateScreen>
					count++;
 8000b52:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000b56:	3301      	adds	r3, #1
 8000b58:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
					HAL_Delay(delay);
 8000b5c:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 f9e1 	bl	8001f28 <HAL_Delay>
				}
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) {
 8000b66:	2102      	movs	r1, #2
 8000b68:	4819      	ldr	r0, [pc, #100]	@ (8000bd0 <main+0x700>)
 8000b6a:	f001 fc69 	bl	8002440 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d10c      	bne.n	8000b8e <main+0x6be>
					d = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
					r = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
					u = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
					l = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
					break;
 8000b8c:	e2de      	b.n	800114c <main+0xc7c>
				}
				else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 8000b8e:	2110      	movs	r1, #16
 8000b90:	480f      	ldr	r0, [pc, #60]	@ (8000bd0 <main+0x700>)
 8000b92:	f001 fc55 	bl	8002440 <HAL_GPIO_ReadPin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d10c      	bne.n	8000bb6 <main+0x6e6>
					d = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
					l = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
					u = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
					r = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
					break;
 8000bb4:	e2ca      	b.n	800114c <main+0xc7c>
			while ( u == 1 ) {
 8000bb6:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	f43f aea4 	beq.w	8000908 <main+0x438>
 8000bc0:	e53c      	b.n	800063c <main+0x16c>
				}
			}
		}
		else if (d == 1) {
 8000bc2:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	f040 8160 	bne.w	8000e8c <main+0x9bc>
			// move up, s[0] = head
			while ( d == 1 ) {
 8000bcc:	e157      	b.n	8000e7e <main+0x9ae>
 8000bce:	bf00      	nop
 8000bd0:	40010800 	.word	0x40010800


				if ( s[0].y == fruitY - 3 && s[0].x == fruitX) {
 8000bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000bd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	461a      	mov	r2, r3
 8000be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000be4:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	3b03      	subs	r3, #3
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d143      	bne.n	8000c78 <main+0x7a8>
 8000bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000bf4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000bfe:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d137      	bne.n	8000c78 <main+0x7a8>
					snakeLen++;
 8000c08:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
					s[snakeLen - 1].x = s[snakeLen - 2].x;
 8000c12:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000c16:	1e99      	subs	r1, r3, #2
 8000c18:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c26:	f813 1011 	ldrb.w	r1, [r3, r1, lsl #1]
 8000c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c32:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
					s[snakeLen - 1].y = s[snakeLen - 2].y - 3;
 8000c36:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000c3a:	3b02      	subs	r3, #2
 8000c3c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000c40:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4413      	add	r3, r2
 8000c48:	785a      	ldrb	r2, [r3, #1]
 8000c4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	3a03      	subs	r2, #3
 8000c52:	b2d1      	uxtb	r1, r2
 8000c54:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000c58:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	460a      	mov	r2, r1
 8000c62:	705a      	strb	r2, [r3, #1]

					NewFruit(s, snakeLen, &fruitX, &fruitY);
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	1dfa      	adds	r2, r7, #7
 8000c68:	f107 0008 	add.w	r0, r7, #8
 8000c6c:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000c70:	f000 fb2c 	bl	80012cc <NewFruit>
					SSD1306_UpdateScreen();
 8000c74:	f000 fc88 	bl	8001588 <SSD1306_UpdateScreen>
				}
				if (checkColli(s, snakeLen, 0, 3) == 1) {
 8000c78:	f107 0008 	add.w	r0, r7, #8
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000c84:	f7ff fbb9 	bl	80003fa <checkColli>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d104      	bne.n	8000c98 <main+0x7c8>
					end( snakeLen);
 8000c8e:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8000c92:	f7ff fbe7 	bl	8000464 <end>
					break;
 8000c96:	e259      	b.n	800114c <main+0xc7c>

				}
				if ( s[0].y == 58 ) {
 8000c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ca0:	785b      	ldrb	r3, [r3, #1]
 8000ca2:	2b3a      	cmp	r3, #58	@ 0x3a
 8000ca4:	d16f      	bne.n	8000d86 <main+0x8b6>
					uint8_t lastX = s[snakeLen - 1].x;
 8000ca6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000cb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000cb4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000cb8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
					uint8_t lastY = s[snakeLen - 1].y;
 8000cbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000cc6:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	785b      	ldrb	r3, [r3, #1]
 8000cd0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 8000cd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8000cd8:	b298      	uxth	r0, r3
 8000cda:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 8000cde:	b299      	uxth	r1, r3
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	f000 fded 	bl	80018c6 <SSD1306_DrawRectangle>
					updateSnake(s, snakeLen);
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fb51 	bl	800039c <updateSnake>
					s[0].x = s[0].x;
 8000cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000cfe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d02:	781a      	ldrb	r2, [r3, #0]
 8000d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d0c:	701a      	strb	r2, [r3, #0]
					s[0].y = 1;
 8000d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d12:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d16:	2201      	movs	r2, #1
 8000d18:	705a      	strb	r2, [r3, #1]

					lastX = s[snakeLen - 1].x;
 8000d1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d28:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000d2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
					lastY = s[snakeLen - 1].y;
 8000d30:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000d34:	3b01      	subs	r3, #1
 8000d36:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000d3a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	785b      	ldrb	r3, [r3, #1]
 8000d44:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

					SSD1306_DrawRectangle(s[0].x, s[0].y, 2, 2, 1);
 8000d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d58:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	2301      	movs	r3, #1
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2302      	movs	r3, #2
 8000d66:	2202      	movs	r2, #2
 8000d68:	f000 fdad 	bl	80018c6 <SSD1306_DrawRectangle>
					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 8000d6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8000d70:	b298      	uxth	r0, r3
 8000d72:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 8000d76:	b299      	uxth	r1, r3
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	2202      	movs	r2, #2
 8000d80:	f000 fda1 	bl	80018c6 <SSD1306_DrawRectangle>
 8000d84:	e053      	b.n	8000e2e <main+0x95e>
				}
				else {
					int lastX = s[snakeLen - 1].x;
 8000d86:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d94:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000d98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
					int lastY = s[snakeLen - 1].y;
 8000d9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000da0:	3b01      	subs	r3, #1
 8000da2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000da6:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
					updateSnake(s, snakeLen);
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff faed 	bl	800039c <updateSnake>

					s[0].y += 3;
 8000dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000dc6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	3303      	adds	r3, #3
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000dd4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000dd8:	705a      	strb	r2, [r3, #1]

					SSD1306_DrawRectangle(s[0].x, s[0].y, 2, 2, 1);
 8000dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000dde:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000dea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000dee:	785b      	ldrb	r3, [r3, #1]
 8000df0:	4619      	mov	r1, r3
 8000df2:	2301      	movs	r3, #1
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2302      	movs	r3, #2
 8000df8:	2202      	movs	r2, #2
 8000dfa:	f000 fd64 	bl	80018c6 <SSD1306_DrawRectangle>
					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 8000dfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000e02:	b298      	uxth	r0, r3
 8000e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000e08:	b299      	uxth	r1, r3
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2302      	movs	r3, #2
 8000e10:	2202      	movs	r2, #2
 8000e12:	f000 fd58 	bl	80018c6 <SSD1306_DrawRectangle>

					SSD1306_UpdateScreen();
 8000e16:	f000 fbb7 	bl	8001588 <SSD1306_UpdateScreen>
					count++;
 8000e1a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
					HAL_Delay(delay);
 8000e24:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 f87d 	bl	8001f28 <HAL_Delay>
				}
				// check left and right
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) {
 8000e2e:	2102      	movs	r1, #2
 8000e30:	48c7      	ldr	r0, [pc, #796]	@ (8001150 <main+0xc80>)
 8000e32:	f001 fb05 	bl	8002440 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d10c      	bne.n	8000e56 <main+0x986>
					d = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
					r = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
					u = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
					l = 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
					break;
 8000e54:	e17a      	b.n	800114c <main+0xc7c>
				}
				else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) {
 8000e56:	2110      	movs	r1, #16
 8000e58:	48bd      	ldr	r0, [pc, #756]	@ (8001150 <main+0xc80>)
 8000e5a:	f001 faf1 	bl	8002440 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10c      	bne.n	8000e7e <main+0x9ae>
					d = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
					l = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
					u = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
					r = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
					break;
 8000e7c:	e166      	b.n	800114c <main+0xc7c>
			while ( d == 1 ) {
 8000e7e:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	f43f aea6 	beq.w	8000bd4 <main+0x704>
 8000e88:	f7ff bbd8 	b.w	800063c <main+0x16c>
				}
			}
		}
		else if (r == 1) {
 8000e8c:	f897 30f6 	ldrb.w	r3, [r7, #246]	@ 0xf6
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	f47f abd3 	bne.w	800063c <main+0x16c>
			while ( r == 1 ) {
 8000e96:	e154      	b.n	8001142 <main+0xc72>

				if ( s[0].x == fruitX - 3 && s[0].y == fruitY) {
 8000e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000e9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ea8:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	3b03      	subs	r3, #3
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d143      	bne.n	8000f3c <main+0xa6c>
 8000eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000eb8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ebc:	785a      	ldrb	r2, [r3, #1]
 8000ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ec2:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d137      	bne.n	8000f3c <main+0xa6c>
					snakeLen++;
 8000ecc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
					s[snakeLen - 1].x = s[snakeLen - 2].x + 3;
 8000ed6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000eda:	1e9a      	subs	r2, r3, #2
 8000edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ee0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ee4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000ee8:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8000eec:	3a01      	subs	r2, #1
 8000eee:	3303      	adds	r3, #3
 8000ef0:	b2d9      	uxtb	r1, r3
 8000ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ef6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000efa:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
					s[snakeLen - 1].y = s[snakeLen - 2].y;
 8000efe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000f02:	3b02      	subs	r3, #2
 8000f04:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8000f08:	1e51      	subs	r1, r2, #1
 8000f0a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000f0e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	7858      	ldrb	r0, [r3, #1]
 8000f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f1c:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8000f20:	004b      	lsls	r3, r1, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	4602      	mov	r2, r0
 8000f26:	705a      	strb	r2, [r3, #1]

					NewFruit(s, snakeLen, &fruitX, &fruitY);
 8000f28:	1dbb      	adds	r3, r7, #6
 8000f2a:	1dfa      	adds	r2, r7, #7
 8000f2c:	f107 0008 	add.w	r0, r7, #8
 8000f30:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000f34:	f000 f9ca 	bl	80012cc <NewFruit>
					SSD1306_UpdateScreen();
 8000f38:	f000 fb26 	bl	8001588 <SSD1306_UpdateScreen>
				}
				if (checkColli(s, snakeLen, 3, 0) == 1) {
 8000f3c:	f107 0008 	add.w	r0, r7, #8
 8000f40:	2300      	movs	r3, #0
 8000f42:	2203      	movs	r2, #3
 8000f44:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000f48:	f7ff fa57 	bl	80003fa <checkColli>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d104      	bne.n	8000f5c <main+0xa8c>
					end( snakeLen);
 8000f52:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8000f56:	f7ff fa85 	bl	8000464 <end>
					break;
 8000f5a:	e0f7      	b.n	800114c <main+0xc7c>

				}
				if ( s[0].x == 121 ) {
 8000f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b79      	cmp	r3, #121	@ 0x79
 8000f68:	d16f      	bne.n	800104a <main+0xb7a>
					uint8_t lastX = s[snakeLen - 1].x;
 8000f6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000f6e:	1e5a      	subs	r2, r3, #1
 8000f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f78:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000f7c:	f887 30f0 	strb.w	r3, [r7, #240]	@ 0xf0
					uint8_t lastY = s[snakeLen - 1].y;
 8000f80:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000f84:	3b01      	subs	r3, #1
 8000f86:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000f8a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 8000f98:	f897 30f0 	ldrb.w	r3, [r7, #240]	@ 0xf0
 8000f9c:	b298      	uxth	r0, r3
 8000f9e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8000fa2:	b299      	uxth	r1, r3
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2302      	movs	r3, #2
 8000faa:	2202      	movs	r2, #2
 8000fac:	f000 fc8b 	bl	80018c6 <SSD1306_DrawRectangle>
					updateSnake(s, snakeLen);
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f9ef 	bl	800039c <updateSnake>
					s[0].x = 1;
 8000fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fc2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
					s[0].y = s[0].y;
 8000fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fd2:	785a      	ldrb	r2, [r3, #1]
 8000fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fdc:	705a      	strb	r2, [r3, #1]

					lastX = s[snakeLen - 1].x;
 8000fde:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000fe2:	1e5a      	subs	r2, r3, #1
 8000fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fe8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000fec:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000ff0:	f887 30f0 	strb.w	r3, [r7, #240]	@ 0xf0
					lastY = s[snakeLen - 1].y;
 8000ff4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000ffe:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

					SSD1306_DrawRectangle(s[0].x, s[0].y, 2, 2, 1);
 800100c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001010:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800101c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	4619      	mov	r1, r3
 8001024:	2301      	movs	r3, #1
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2302      	movs	r3, #2
 800102a:	2202      	movs	r2, #2
 800102c:	f000 fc4b 	bl	80018c6 <SSD1306_DrawRectangle>
					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 8001030:	f897 30f0 	ldrb.w	r3, [r7, #240]	@ 0xf0
 8001034:	b298      	uxth	r0, r3
 8001036:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800103a:	b299      	uxth	r1, r3
 800103c:	2300      	movs	r3, #0
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2302      	movs	r3, #2
 8001042:	2202      	movs	r2, #2
 8001044:	f000 fc3f 	bl	80018c6 <SSD1306_DrawRectangle>
 8001048:	e053      	b.n	80010f2 <main+0xc22>
				}
				else {
					uint8_t lastX = s[snakeLen - 1].x;
 800104a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800104e:	1e5a      	subs	r2, r3, #1
 8001050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001054:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001058:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 800105c:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
					uint8_t lastY = s[snakeLen - 1].y;
 8001060:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001064:	3b01      	subs	r3, #1
 8001066:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800106a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	785b      	ldrb	r3, [r3, #1]
 8001074:	f887 30f1 	strb.w	r3, [r7, #241]	@ 0xf1
					updateSnake(s, snakeLen);
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f98b 	bl	800039c <updateSnake>
					s[0].x += 3;
 8001086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800108a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	3303      	adds	r3, #3
 8001092:	b2da      	uxtb	r2, r3
 8001094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001098:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800109c:	701a      	strb	r2, [r3, #0]

					SSD1306_DrawRectangle(s[0].x, s[0].y, 2, 2, 1);
 800109e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010ae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	4619      	mov	r1, r3
 80010b6:	2301      	movs	r3, #1
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2302      	movs	r3, #2
 80010bc:	2202      	movs	r2, #2
 80010be:	f000 fc02 	bl	80018c6 <SSD1306_DrawRectangle>
					SSD1306_DrawRectangle(lastX, lastY, 2, 2, 0);
 80010c2:	f897 30f2 	ldrb.w	r3, [r7, #242]	@ 0xf2
 80010c6:	b298      	uxth	r0, r3
 80010c8:	f897 30f1 	ldrb.w	r3, [r7, #241]	@ 0xf1
 80010cc:	b299      	uxth	r1, r3
 80010ce:	2300      	movs	r3, #0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2302      	movs	r3, #2
 80010d4:	2202      	movs	r2, #2
 80010d6:	f000 fbf6 	bl	80018c6 <SSD1306_DrawRectangle>

					SSD1306_UpdateScreen();
 80010da:	f000 fa55 	bl	8001588 <SSD1306_UpdateScreen>
					count++;
 80010de:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80010e2:	3301      	adds	r3, #1
 80010e4:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
					HAL_Delay(delay);
 80010e8:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 ff1b 	bl	8001f28 <HAL_Delay>
				}
				// check up and down
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1) {
 80010f2:	2104      	movs	r1, #4
 80010f4:	4816      	ldr	r0, [pc, #88]	@ (8001150 <main+0xc80>)
 80010f6:	f001 f9a3 	bl	8002440 <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d10c      	bne.n	800111a <main+0xc4a>
					l = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
					d = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
					r = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
					u = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5

					break;
 8001118:	e018      	b.n	800114c <main+0xc7c>
				}
				else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 800111a:	2108      	movs	r1, #8
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <main+0xc80>)
 800111e:	f001 f98f 	bl	8002440 <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d10c      	bne.n	8001142 <main+0xc72>
					l = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
					u = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
					r = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
					d = 1;
 800113a:	2301      	movs	r3, #1
 800113c:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4

					break;
 8001140:	e004      	b.n	800114c <main+0xc7c>
			while ( r == 1 ) {
 8001142:	f897 30f6 	ldrb.w	r3, [r7, #246]	@ 0xf6
 8001146:	2b01      	cmp	r3, #1
 8001148:	f43f aea6 	beq.w	8000e98 <main+0x9c8>
		if (l == 1) {
 800114c:	f7ff ba76 	b.w	800063c <main+0x16c>
 8001150:	40010800 	.word	0x40010800

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b090      	sub	sp, #64	@ 0x40
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	2228      	movs	r2, #40	@ 0x28
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fcbb 	bl	8003ade <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800117e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001188:	2302      	movs	r3, #2
 800118a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001190:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001192:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	4618      	mov	r0, r3
 800119e:	f001 ff31 	bl	8003004 <HAL_RCC_OscConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011a8:	f000 f88a 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ac:	230f      	movs	r3, #15
 80011ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b0:	2302      	movs	r3, #2
 80011b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2102      	movs	r1, #2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 f99e 	bl	8003508 <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011d2:	f000 f875 	bl	80012c0 <Error_Handler>
  }
}
 80011d6:	bf00      	nop
 80011d8:	3740      	adds	r7, #64	@ 0x40
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_I2C1_Init+0x50>)
 80011e6:	4a13      	ldr	r2, [pc, #76]	@ (8001234 <MX_I2C1_Init+0x54>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_I2C1_Init+0x50>)
 80011ec:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <MX_I2C1_Init+0x58>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_I2C1_Init+0x50>)
 80011fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001202:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <MX_I2C1_Init+0x50>)
 800121e:	f001 f927 	bl	8002470 <HAL_I2C_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001228:	f000 f84a 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000124 	.word	0x20000124
 8001234:	40005400 	.word	0x40005400
 8001238:	00061a80 	.word	0x00061a80

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_GPIO_Init+0x7c>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a18      	ldr	r2, [pc, #96]	@ (80012b8 <MX_GPIO_Init+0x7c>)
 8001256:	f043 0320 	orr.w	r3, r3, #32
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <MX_GPIO_Init+0x7c>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <MX_GPIO_Init+0x7c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <MX_GPIO_Init+0x7c>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MX_GPIO_Init+0x7c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <MX_GPIO_Init+0x7c>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <MX_GPIO_Init+0x7c>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <MX_GPIO_Init+0x7c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001298:	2301      	movs	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_GPIO_Init+0x80>)
 80012ac:	f000 ff44 	bl	8002138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010800 	.word	0x40010800

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <Error_Handler+0x8>

080012cc <NewFruit>:
    PULL DOWN PUSH BUTTON
*/
const uint8_t fx[23] = { 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73 };
const uint8_t fy[18] = { 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55 };

void NewFruit(struct snake *s, int snakeLen, uint8_t *fox, uint8_t *foy) {
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	@ 0x24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
    srand(HAL_GetTick() + HAL_GetTick());
 80012da:	f000 fe1b 	bl	8001f14 <HAL_GetTick>
 80012de:	4604      	mov	r4, r0
 80012e0:	f000 fe18 	bl	8001f14 <HAL_GetTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4423      	add	r3, r4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fa87 	bl	80037fc <srand>
    uint8_t fnx = rand() % 22;
 80012ee:	f002 fab3 	bl	8003858 <rand>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a41      	ldr	r2, [pc, #260]	@ (80013fc <NewFruit+0x130>)
 80012f6:	fb82 1203 	smull	r1, r2, r2, r3
 80012fa:	1091      	asrs	r1, r2, #2
 80012fc:	17da      	asrs	r2, r3, #31
 80012fe:	1a8a      	subs	r2, r1, r2
 8001300:	2116      	movs	r1, #22
 8001302:	fb01 f202 	mul.w	r2, r1, r2
 8001306:	1a9a      	subs	r2, r3, r2
 8001308:	4613      	mov	r3, r2
 800130a:	75fb      	strb	r3, [r7, #23]
    uint8_t fny = rand() % 17;
 800130c:	f002 faa4 	bl	8003858 <rand>
 8001310:	4602      	mov	r2, r0
 8001312:	4b3b      	ldr	r3, [pc, #236]	@ (8001400 <NewFruit+0x134>)
 8001314:	fb83 1302 	smull	r1, r3, r3, r2
 8001318:	10d9      	asrs	r1, r3, #3
 800131a:	17d3      	asrs	r3, r2, #31
 800131c:	1ac9      	subs	r1, r1, r3
 800131e:	460b      	mov	r3, r1
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	440b      	add	r3, r1
 8001324:	1ad1      	subs	r1, r2, r3
 8001326:	460b      	mov	r3, r1
 8001328:	75bb      	strb	r3, [r7, #22]
    uint8_t valid = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	757b      	strb	r3, [r7, #21]

    while ( 1 ) {
        int i = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
    	for (i = 0; i < snakeLen; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	e037      	b.n	80013a8 <NewFruit+0xdc>
    		if (fx[fnx] == s[i].x && fy[fny] == s[i].y) {
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	4a32      	ldr	r2, [pc, #200]	@ (8001404 <NewFruit+0x138>)
 800133c:	5cd2      	ldrb	r2, [r2, r3]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	68f9      	ldr	r1, [r7, #12]
 8001344:	440b      	add	r3, r1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d12a      	bne.n	80013a2 <NewFruit+0xd6>
 800134c:	7dbb      	ldrb	r3, [r7, #22]
 800134e:	4a2e      	ldr	r2, [pc, #184]	@ (8001408 <NewFruit+0x13c>)
 8001350:	5cd2      	ldrb	r2, [r2, r3]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	68f9      	ldr	r1, [r7, #12]
 8001358:	440b      	add	r3, r1
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	429a      	cmp	r2, r3
 800135e:	d120      	bne.n	80013a2 <NewFruit+0xd6>
    			valid = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	757b      	strb	r3, [r7, #21]
    		    fnx = rand() % 17;
 8001364:	f002 fa78 	bl	8003858 <rand>
 8001368:	4602      	mov	r2, r0
 800136a:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <NewFruit+0x134>)
 800136c:	fb83 1302 	smull	r1, r3, r3, r2
 8001370:	10d9      	asrs	r1, r3, #3
 8001372:	17d3      	asrs	r3, r2, #31
 8001374:	1ac9      	subs	r1, r1, r3
 8001376:	460b      	mov	r3, r1
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	440b      	add	r3, r1
 800137c:	1ad1      	subs	r1, r2, r3
 800137e:	460b      	mov	r3, r1
 8001380:	75fb      	strb	r3, [r7, #23]
    		    fny = rand() % 17;
 8001382:	f002 fa69 	bl	8003858 <rand>
 8001386:	4602      	mov	r2, r0
 8001388:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <NewFruit+0x134>)
 800138a:	fb83 1302 	smull	r1, r3, r3, r2
 800138e:	10d9      	asrs	r1, r3, #3
 8001390:	17d3      	asrs	r3, r2, #31
 8001392:	1ac9      	subs	r1, r1, r3
 8001394:	460b      	mov	r3, r1
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	440b      	add	r3, r1
 800139a:	1ad1      	subs	r1, r2, r3
 800139c:	460b      	mov	r3, r1
 800139e:	75bb      	strb	r3, [r7, #22]
    			break;
 80013a0:	e006      	b.n	80013b0 <NewFruit+0xe4>
    	for (i = 0; i < snakeLen; i++) {
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	3301      	adds	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbc3      	blt.n	8001338 <NewFruit+0x6c>
    		}
    	}
    	if (i == snakeLen) break;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d003      	beq.n	80013c0 <NewFruit+0xf4>
    	if (valid == 1) {
 80013b8:	7d7b      	ldrb	r3, [r7, #21]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d002      	beq.n	80013c4 <NewFruit+0xf8>
    while ( 1 ) {
 80013be:	e7b6      	b.n	800132e <NewFruit+0x62>
    	if (i == snakeLen) break;
 80013c0:	bf00      	nop
 80013c2:	e000      	b.n	80013c6 <NewFruit+0xfa>
    		break;
 80013c4:	bf00      	nop
    	}
    }
    *fox = fx[fnx];
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <NewFruit+0x138>)
 80013ca:	5cd2      	ldrb	r2, [r2, r3]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	701a      	strb	r2, [r3, #0]
    *foy = fy[fny];
 80013d0:	7dbb      	ldrb	r3, [r7, #22]
 80013d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <NewFruit+0x13c>)
 80013d4:	5cd2      	ldrb	r2, [r2, r3]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	701a      	strb	r2, [r3, #0]
    //SSD1306_DrawFilledRectangle(*fox, *foy, 2, 2, 1);
    SSD1306_DrawRectangle(*fox, *foy, 2, 2, 1);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	2301      	movs	r3, #1
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2302      	movs	r3, #2
 80013ec:	2202      	movs	r2, #2
 80013ee:	f000 fa6a 	bl	80018c6 <SSD1306_DrawRectangle>
}
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2e8ba2e9 	.word	0x2e8ba2e9
 8001400:	78787879 	.word	0x78787879
 8001404:	08004840 	.word	0x08004840
 8001408:	08004858 	.word	0x08004858

0800140c <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001412:	f000 fb0f 	bl	8001a34 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001416:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800141a:	2201      	movs	r2, #1
 800141c:	2178      	movs	r1, #120	@ 0x78
 800141e:	4858      	ldr	r0, [pc, #352]	@ (8001580 <SSD1306_Init+0x174>)
 8001420:	f001 fa68 	bl	80028f4 <HAL_I2C_IsDeviceReady>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800142a:	2300      	movs	r3, #0
 800142c:	e0a4      	b.n	8001578 <SSD1306_Init+0x16c>
	}

	/* A little delay */
	uint32_t p = 2500;
 800142e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001432:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001434:	e002      	b.n	800143c <SSD1306_Init+0x30>
		p--;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3b01      	subs	r3, #1
 800143a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f9      	bne.n	8001436 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001442:	22ae      	movs	r2, #174	@ 0xae
 8001444:	2100      	movs	r1, #0
 8001446:	2078      	movs	r0, #120	@ 0x78
 8001448:	f000 fb64 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800144c:	2220      	movs	r2, #32
 800144e:	2100      	movs	r1, #0
 8001450:	2078      	movs	r0, #120	@ 0x78
 8001452:	f000 fb5f 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001456:	2210      	movs	r2, #16
 8001458:	2100      	movs	r1, #0
 800145a:	2078      	movs	r0, #120	@ 0x78
 800145c:	f000 fb5a 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001460:	22b0      	movs	r2, #176	@ 0xb0
 8001462:	2100      	movs	r1, #0
 8001464:	2078      	movs	r0, #120	@ 0x78
 8001466:	f000 fb55 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800146a:	22c8      	movs	r2, #200	@ 0xc8
 800146c:	2100      	movs	r1, #0
 800146e:	2078      	movs	r0, #120	@ 0x78
 8001470:	f000 fb50 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	2078      	movs	r0, #120	@ 0x78
 800147a:	f000 fb4b 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800147e:	2210      	movs	r2, #16
 8001480:	2100      	movs	r1, #0
 8001482:	2078      	movs	r0, #120	@ 0x78
 8001484:	f000 fb46 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001488:	2240      	movs	r2, #64	@ 0x40
 800148a:	2100      	movs	r1, #0
 800148c:	2078      	movs	r0, #120	@ 0x78
 800148e:	f000 fb41 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001492:	2281      	movs	r2, #129	@ 0x81
 8001494:	2100      	movs	r1, #0
 8001496:	2078      	movs	r0, #120	@ 0x78
 8001498:	f000 fb3c 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800149c:	22ff      	movs	r2, #255	@ 0xff
 800149e:	2100      	movs	r1, #0
 80014a0:	2078      	movs	r0, #120	@ 0x78
 80014a2:	f000 fb37 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014a6:	22a1      	movs	r2, #161	@ 0xa1
 80014a8:	2100      	movs	r1, #0
 80014aa:	2078      	movs	r0, #120	@ 0x78
 80014ac:	f000 fb32 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014b0:	22a6      	movs	r2, #166	@ 0xa6
 80014b2:	2100      	movs	r1, #0
 80014b4:	2078      	movs	r0, #120	@ 0x78
 80014b6:	f000 fb2d 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80014ba:	22a8      	movs	r2, #168	@ 0xa8
 80014bc:	2100      	movs	r1, #0
 80014be:	2078      	movs	r0, #120	@ 0x78
 80014c0:	f000 fb28 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80014c4:	223f      	movs	r2, #63	@ 0x3f
 80014c6:	2100      	movs	r1, #0
 80014c8:	2078      	movs	r0, #120	@ 0x78
 80014ca:	f000 fb23 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014ce:	22a4      	movs	r2, #164	@ 0xa4
 80014d0:	2100      	movs	r1, #0
 80014d2:	2078      	movs	r0, #120	@ 0x78
 80014d4:	f000 fb1e 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80014d8:	22d3      	movs	r2, #211	@ 0xd3
 80014da:	2100      	movs	r1, #0
 80014dc:	2078      	movs	r0, #120	@ 0x78
 80014de:	f000 fb19 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2078      	movs	r0, #120	@ 0x78
 80014e8:	f000 fb14 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014ec:	22d5      	movs	r2, #213	@ 0xd5
 80014ee:	2100      	movs	r1, #0
 80014f0:	2078      	movs	r0, #120	@ 0x78
 80014f2:	f000 fb0f 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014f6:	22f0      	movs	r2, #240	@ 0xf0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2078      	movs	r0, #120	@ 0x78
 80014fc:	f000 fb0a 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001500:	22d9      	movs	r2, #217	@ 0xd9
 8001502:	2100      	movs	r1, #0
 8001504:	2078      	movs	r0, #120	@ 0x78
 8001506:	f000 fb05 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800150a:	2222      	movs	r2, #34	@ 0x22
 800150c:	2100      	movs	r1, #0
 800150e:	2078      	movs	r0, #120	@ 0x78
 8001510:	f000 fb00 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001514:	22da      	movs	r2, #218	@ 0xda
 8001516:	2100      	movs	r1, #0
 8001518:	2078      	movs	r0, #120	@ 0x78
 800151a:	f000 fafb 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800151e:	2212      	movs	r2, #18
 8001520:	2100      	movs	r1, #0
 8001522:	2078      	movs	r0, #120	@ 0x78
 8001524:	f000 faf6 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001528:	22db      	movs	r2, #219	@ 0xdb
 800152a:	2100      	movs	r1, #0
 800152c:	2078      	movs	r0, #120	@ 0x78
 800152e:	f000 faf1 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001532:	2220      	movs	r2, #32
 8001534:	2100      	movs	r1, #0
 8001536:	2078      	movs	r0, #120	@ 0x78
 8001538:	f000 faec 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800153c:	228d      	movs	r2, #141	@ 0x8d
 800153e:	2100      	movs	r1, #0
 8001540:	2078      	movs	r0, #120	@ 0x78
 8001542:	f000 fae7 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001546:	2214      	movs	r2, #20
 8001548:	2100      	movs	r1, #0
 800154a:	2078      	movs	r0, #120	@ 0x78
 800154c:	f000 fae2 	bl	8001b14 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001550:	22af      	movs	r2, #175	@ 0xaf
 8001552:	2100      	movs	r1, #0
 8001554:	2078      	movs	r0, #120	@ 0x78
 8001556:	f000 fadd 	bl	8001b14 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800155a:	2000      	movs	r0, #0
 800155c:	f000 f842 	bl	80015e4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001560:	f000 f812 	bl	8001588 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <SSD1306_Init+0x178>)
 8001566:	2200      	movs	r2, #0
 8001568:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <SSD1306_Init+0x178>)
 800156c:	2200      	movs	r2, #0
 800156e:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <SSD1306_Init+0x178>)
 8001572:	2201      	movs	r2, #1
 8001574:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000124 	.word	0x20000124
 8001584:	20000578 	.word	0x20000578

08001588 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800158e:	2300      	movs	r3, #0
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	e01d      	b.n	80015d0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	3b50      	subs	r3, #80	@ 0x50
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	@ 0x78
 80015a0:	f000 fab8 	bl	8001b14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	@ 0x78
 80015aa:	f000 fab3 	bl	8001b14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015ae:	2210      	movs	r2, #16
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	@ 0x78
 80015b4:	f000 faae 	bl	8001b14 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	01db      	lsls	r3, r3, #7
 80015bc:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <SSD1306_UpdateScreen+0x58>)
 80015be:	441a      	add	r2, r3
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	2140      	movs	r1, #64	@ 0x40
 80015c4:	2078      	movs	r0, #120	@ 0x78
 80015c6:	f000 fa49 	bl	8001a5c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	3301      	adds	r3, #1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b07      	cmp	r3, #7
 80015d4:	d9de      	bls.n	8001594 <SSD1306_UpdateScreen+0xc>
	}
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000178 	.word	0x20000178

080015e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <SSD1306_Fill+0x14>
 80015f4:	2300      	movs	r3, #0
 80015f6:	e000      	b.n	80015fa <SSD1306_Fill+0x16>
 80015f8:	23ff      	movs	r3, #255	@ 0xff
 80015fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015fe:	4619      	mov	r1, r3
 8001600:	4803      	ldr	r0, [pc, #12]	@ (8001610 <SSD1306_Fill+0x2c>)
 8001602:	f002 fa6c 	bl	8003ade <memset>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000178 	.word	0x20000178

08001614 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	80fb      	strh	r3, [r7, #6]
 800161e:	460b      	mov	r3, r1
 8001620:	80bb      	strh	r3, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	70fb      	strb	r3, [r7, #3]
	if (
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	2b7f      	cmp	r3, #127	@ 0x7f
 800162a:	d848      	bhi.n	80016be <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001630:	d845      	bhi.n	80016be <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001632:	4b25      	ldr	r3, [pc, #148]	@ (80016c8 <SSD1306_DrawPixel+0xb4>)
 8001634:	791b      	ldrb	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d11a      	bne.n	8001684 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800164e:	88fa      	ldrh	r2, [r7, #6]
 8001650:	88bb      	ldrh	r3, [r7, #4]
 8001652:	08db      	lsrs	r3, r3, #3
 8001654:	b298      	uxth	r0, r3
 8001656:	4603      	mov	r3, r0
 8001658:	01db      	lsls	r3, r3, #7
 800165a:	4413      	add	r3, r2
 800165c:	4a1b      	ldr	r2, [pc, #108]	@ (80016cc <SSD1306_DrawPixel+0xb8>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	b25a      	sxtb	r2, r3
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	2101      	movs	r1, #1
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	b25b      	sxtb	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b259      	sxtb	r1, r3
 8001674:	88fa      	ldrh	r2, [r7, #6]
 8001676:	4603      	mov	r3, r0
 8001678:	01db      	lsls	r3, r3, #7
 800167a:	4413      	add	r3, r2
 800167c:	b2c9      	uxtb	r1, r1
 800167e:	4a13      	ldr	r2, [pc, #76]	@ (80016cc <SSD1306_DrawPixel+0xb8>)
 8001680:	54d1      	strb	r1, [r2, r3]
 8001682:	e01d      	b.n	80016c0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	b298      	uxth	r0, r3
 800168c:	4603      	mov	r3, r0
 800168e:	01db      	lsls	r3, r3, #7
 8001690:	4413      	add	r3, r2
 8001692:	4a0e      	ldr	r2, [pc, #56]	@ (80016cc <SSD1306_DrawPixel+0xb8>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	b25a      	sxtb	r2, r3
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	4013      	ands	r3, r2
 80016ac:	b259      	sxtb	r1, r3
 80016ae:	88fa      	ldrh	r2, [r7, #6]
 80016b0:	4603      	mov	r3, r0
 80016b2:	01db      	lsls	r3, r3, #7
 80016b4:	4413      	add	r3, r2
 80016b6:	b2c9      	uxtb	r1, r1
 80016b8:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <SSD1306_DrawPixel+0xb8>)
 80016ba:	54d1      	strb	r1, [r2, r3]
 80016bc:	e000      	b.n	80016c0 <SSD1306_DrawPixel+0xac>
		return;
 80016be:	bf00      	nop
	}
}
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000578 	.word	0x20000578
 80016cc:	20000178 	.word	0x20000178

080016d0 <SSD1306_DrawLine>:
	/* Everything OK, zero should be returned */
	return *str;
}


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4604      	mov	r4, r0
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4623      	mov	r3, r4
 80016e0:	80fb      	strh	r3, [r7, #6]
 80016e2:	4603      	mov	r3, r0
 80016e4:	80bb      	strh	r3, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	807b      	strh	r3, [r7, #2]
 80016ea:	4613      	mov	r3, r2
 80016ec:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80016f2:	d901      	bls.n	80016f8 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80016f4:	237f      	movs	r3, #127	@ 0x7f
 80016f6:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80016fc:	d901      	bls.n	8001702 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80016fe:	237f      	movs	r3, #127	@ 0x7f
 8001700:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	2b3f      	cmp	r3, #63	@ 0x3f
 8001706:	d901      	bls.n	800170c <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001708:	233f      	movs	r3, #63	@ 0x3f
 800170a:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800170c:	883b      	ldrh	r3, [r7, #0]
 800170e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001710:	d901      	bls.n	8001716 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001712:	233f      	movs	r3, #63	@ 0x3f
 8001714:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	429a      	cmp	r2, r3
 800171c:	d205      	bcs.n	800172a <SSD1306_DrawLine+0x5a>
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21b      	sxth	r3, r3
 8001728:	e004      	b.n	8001734 <SSD1306_DrawLine+0x64>
 800172a:	88fa      	ldrh	r2, [r7, #6]
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	b29b      	uxth	r3, r3
 8001732:	b21b      	sxth	r3, r3
 8001734:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001736:	88ba      	ldrh	r2, [r7, #4]
 8001738:	883b      	ldrh	r3, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d205      	bcs.n	800174a <SSD1306_DrawLine+0x7a>
 800173e:	883a      	ldrh	r2, [r7, #0]
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	b29b      	uxth	r3, r3
 8001746:	b21b      	sxth	r3, r3
 8001748:	e004      	b.n	8001754 <SSD1306_DrawLine+0x84>
 800174a:	88ba      	ldrh	r2, [r7, #4]
 800174c:	883b      	ldrh	r3, [r7, #0]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b29b      	uxth	r3, r3
 8001752:	b21b      	sxth	r3, r3
 8001754:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001756:	88fa      	ldrh	r2, [r7, #6]
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	429a      	cmp	r2, r3
 800175c:	d201      	bcs.n	8001762 <SSD1306_DrawLine+0x92>
 800175e:	2301      	movs	r3, #1
 8001760:	e001      	b.n	8001766 <SSD1306_DrawLine+0x96>
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001768:	88ba      	ldrh	r2, [r7, #4]
 800176a:	883b      	ldrh	r3, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d201      	bcs.n	8001774 <SSD1306_DrawLine+0xa4>
 8001770:	2301      	movs	r3, #1
 8001772:	e001      	b.n	8001778 <SSD1306_DrawLine+0xa8>
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 800177a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800177e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	dd06      	ble.n	8001794 <SSD1306_DrawLine+0xc4>
 8001786:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800178a:	0fda      	lsrs	r2, r3, #31
 800178c:	4413      	add	r3, r2
 800178e:	105b      	asrs	r3, r3, #1
 8001790:	b21b      	sxth	r3, r3
 8001792:	e006      	b.n	80017a2 <SSD1306_DrawLine+0xd2>
 8001794:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001798:	0fda      	lsrs	r2, r3, #31
 800179a:	4413      	add	r3, r2
 800179c:	105b      	asrs	r3, r3, #1
 800179e:	425b      	negs	r3, r3
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80017a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d129      	bne.n	8001800 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80017ac:	883a      	ldrh	r2, [r7, #0]
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d205      	bcs.n	80017c0 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80017b4:	883b      	ldrh	r3, [r7, #0]
 80017b6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80017b8:	88bb      	ldrh	r3, [r7, #4]
 80017ba:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80017bc:	893b      	ldrh	r3, [r7, #8]
 80017be:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80017c0:	887a      	ldrh	r2, [r7, #2]
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d205      	bcs.n	80017d4 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80017c8:	887b      	ldrh	r3, [r7, #2]
 80017ca:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80017d0:	893b      	ldrh	r3, [r7, #8]
 80017d2:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	82bb      	strh	r3, [r7, #20]
 80017d8:	e00c      	b.n	80017f4 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80017da:	8ab9      	ldrh	r1, [r7, #20]
 80017dc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff16 	bl	8001614 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80017e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	82bb      	strh	r3, [r7, #20]
 80017f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017f8:	883b      	ldrh	r3, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dded      	ble.n	80017da <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 80017fe:	e05f      	b.n	80018c0 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8001800:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d129      	bne.n	800185c <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001808:	883a      	ldrh	r2, [r7, #0]
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	d205      	bcs.n	800181c <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001810:	883b      	ldrh	r3, [r7, #0]
 8001812:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001814:	88bb      	ldrh	r3, [r7, #4]
 8001816:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001818:	893b      	ldrh	r3, [r7, #8]
 800181a:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 800181c:	887a      	ldrh	r2, [r7, #2]
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	429a      	cmp	r2, r3
 8001822:	d205      	bcs.n	8001830 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001824:	887b      	ldrh	r3, [r7, #2]
 8001826:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800182c:	893b      	ldrh	r3, [r7, #8]
 800182e:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	82bb      	strh	r3, [r7, #20]
 8001834:	e00c      	b.n	8001850 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001836:	8abb      	ldrh	r3, [r7, #20]
 8001838:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800183c:	88b9      	ldrh	r1, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fee8 	bl	8001614 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001844:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001848:	b29b      	uxth	r3, r3
 800184a:	3301      	adds	r3, #1
 800184c:	b29b      	uxth	r3, r3
 800184e:	82bb      	strh	r3, [r7, #20]
 8001850:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	429a      	cmp	r2, r3
 8001858:	dded      	ble.n	8001836 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 800185a:	e031      	b.n	80018c0 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800185c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001860:	88b9      	ldrh	r1, [r7, #4]
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fed5 	bl	8001614 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	429a      	cmp	r2, r3
 8001870:	d103      	bne.n	800187a <SSD1306_DrawLine+0x1aa>
 8001872:	88ba      	ldrh	r2, [r7, #4]
 8001874:	883b      	ldrh	r3, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d021      	beq.n	80018be <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 800187a:	8afb      	ldrh	r3, [r7, #22]
 800187c:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800187e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001882:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001886:	425b      	negs	r3, r3
 8001888:	429a      	cmp	r2, r3
 800188a:	dd08      	ble.n	800189e <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800188c:	8afa      	ldrh	r2, [r7, #22]
 800188e:	8a3b      	ldrh	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001896:	89fa      	ldrh	r2, [r7, #14]
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4413      	add	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 800189e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80018a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dad8      	bge.n	800185c <SSD1306_DrawLine+0x18c>
			err += dx;
 80018aa:	8afa      	ldrh	r2, [r7, #22]
 80018ac:	8a7b      	ldrh	r3, [r7, #18]
 80018ae:	4413      	add	r3, r2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80018b4:	89ba      	ldrh	r2, [r7, #12]
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80018bc:	e7ce      	b.n	800185c <SSD1306_DrawLine+0x18c>
			break;
 80018be:	bf00      	nop
		}
	}
}
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd90      	pop	{r4, r7, pc}

080018c6 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80018c6:	b590      	push	{r4, r7, lr}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af02      	add	r7, sp, #8
 80018cc:	4604      	mov	r4, r0
 80018ce:	4608      	mov	r0, r1
 80018d0:	4611      	mov	r1, r2
 80018d2:	461a      	mov	r2, r3
 80018d4:	4623      	mov	r3, r4
 80018d6:	80fb      	strh	r3, [r7, #6]
 80018d8:	4603      	mov	r3, r0
 80018da:	80bb      	strh	r3, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80018e8:	d853      	bhi.n	8001992 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80018ee:	d850      	bhi.n	8001992 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80018f0:	88fa      	ldrh	r2, [r7, #6]
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	4413      	add	r3, r2
 80018f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80018f8:	dd03      	ble.n	8001902 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001900:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001902:	88ba      	ldrh	r2, [r7, #4]
 8001904:	883b      	ldrh	r3, [r7, #0]
 8001906:	4413      	add	r3, r2
 8001908:	2b3f      	cmp	r3, #63	@ 0x3f
 800190a:	dd03      	ble.n	8001914 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001912:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001914:	88fa      	ldrh	r2, [r7, #6]
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	4413      	add	r3, r2
 800191a:	b29a      	uxth	r2, r3
 800191c:	88bc      	ldrh	r4, [r7, #4]
 800191e:	88b9      	ldrh	r1, [r7, #4]
 8001920:	88f8      	ldrh	r0, [r7, #6]
 8001922:	7e3b      	ldrb	r3, [r7, #24]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4623      	mov	r3, r4
 8001928:	f7ff fed2 	bl	80016d0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800192c:	88ba      	ldrh	r2, [r7, #4]
 800192e:	883b      	ldrh	r3, [r7, #0]
 8001930:	4413      	add	r3, r2
 8001932:	b299      	uxth	r1, r3
 8001934:	88fa      	ldrh	r2, [r7, #6]
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	4413      	add	r3, r2
 800193a:	b29c      	uxth	r4, r3
 800193c:	88ba      	ldrh	r2, [r7, #4]
 800193e:	883b      	ldrh	r3, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	b29a      	uxth	r2, r3
 8001944:	88f8      	ldrh	r0, [r7, #6]
 8001946:	7e3b      	ldrb	r3, [r7, #24]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4613      	mov	r3, r2
 800194c:	4622      	mov	r2, r4
 800194e:	f7ff febf 	bl	80016d0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001952:	88ba      	ldrh	r2, [r7, #4]
 8001954:	883b      	ldrh	r3, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	b29c      	uxth	r4, r3
 800195a:	88fa      	ldrh	r2, [r7, #6]
 800195c:	88b9      	ldrh	r1, [r7, #4]
 800195e:	88f8      	ldrh	r0, [r7, #6]
 8001960:	7e3b      	ldrb	r3, [r7, #24]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4623      	mov	r3, r4
 8001966:	f7ff feb3 	bl	80016d0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	4413      	add	r3, r2
 8001970:	b298      	uxth	r0, r3
 8001972:	88fa      	ldrh	r2, [r7, #6]
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	4413      	add	r3, r2
 8001978:	b29c      	uxth	r4, r3
 800197a:	88ba      	ldrh	r2, [r7, #4]
 800197c:	883b      	ldrh	r3, [r7, #0]
 800197e:	4413      	add	r3, r2
 8001980:	b29a      	uxth	r2, r3
 8001982:	88b9      	ldrh	r1, [r7, #4]
 8001984:	7e3b      	ldrb	r3, [r7, #24]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	4622      	mov	r2, r4
 800198c:	f7ff fea0 	bl	80016d0 <SSD1306_DrawLine>
 8001990:	e000      	b.n	8001994 <SSD1306_DrawRectangle+0xce>
		return;
 8001992:	bf00      	nop
}
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}

0800199a <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800199a:	b590      	push	{r4, r7, lr}
 800199c:	b087      	sub	sp, #28
 800199e:	af02      	add	r7, sp, #8
 80019a0:	4604      	mov	r4, r0
 80019a2:	4608      	mov	r0, r1
 80019a4:	4611      	mov	r1, r2
 80019a6:	461a      	mov	r2, r3
 80019a8:	4623      	mov	r3, r4
 80019aa:	80fb      	strh	r3, [r7, #6]
 80019ac:	4603      	mov	r3, r0
 80019ae:	80bb      	strh	r3, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80019bc:	d836      	bhi.n	8001a2c <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 80019be:	88bb      	ldrh	r3, [r7, #4]
 80019c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80019c2:	d833      	bhi.n	8001a2c <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80019c4:	88fa      	ldrh	r2, [r7, #6]
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	4413      	add	r3, r2
 80019ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80019cc:	dd03      	ble.n	80019d6 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80019d4:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80019d6:	88ba      	ldrh	r2, [r7, #4]
 80019d8:	883b      	ldrh	r3, [r7, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80019de:	dd03      	ble.n	80019e8 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80019e0:	88bb      	ldrh	r3, [r7, #4]
 80019e2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80019e6:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e018      	b.n	8001a20 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	b299      	uxth	r1, r3
 80019f8:	88fa      	ldrh	r2, [r7, #6]
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	4413      	add	r3, r2
 80019fe:	b29c      	uxth	r4, r3
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	88f8      	ldrh	r0, [r7, #6]
 8001a0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	4613      	mov	r3, r2
 8001a14:	4622      	mov	r2, r4
 8001a16:	f7ff fe5b 	bl	80016d0 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	883a      	ldrh	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d2e1      	bcs.n	80019ee <SSD1306_DrawFilledRectangle+0x54>
 8001a2a:	e000      	b.n	8001a2e <SSD1306_DrawFilledRectangle+0x94>
		return;
 8001a2c:	bf00      	nop
	}
}
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}

08001a34 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <ssd1306_I2C_Init+0x24>)
 8001a3c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a3e:	e002      	b.n	8001a46 <ssd1306_I2C_Init+0x12>
		p--;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f9      	bne.n	8001a40 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	0003d090 	.word	0x0003d090

08001a5c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a60:	b089      	sub	sp, #36	@ 0x24
 8001a62:	af02      	add	r7, sp, #8
 8001a64:	603a      	str	r2, [r7, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	71bb      	strb	r3, [r7, #6]
 8001a70:	4613      	mov	r3, r2
 8001a72:	80bb      	strh	r3, [r7, #4]
 8001a74:	466b      	mov	r3, sp
 8001a76:	461e      	mov	r6, r3
	uint8_t dt[count + 1];
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	1c59      	adds	r1, r3, #1
 8001a7c:	1e4b      	subs	r3, r1, #1
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	460a      	mov	r2, r1
 8001a82:	2300      	movs	r3, #0
 8001a84:	4690      	mov	r8, r2
 8001a86:	4699      	mov	r9, r3
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	00eb      	lsls	r3, r5, #3
 8001aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab2:	00e2      	lsls	r2, r4, #3
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	3307      	adds	r3, #7
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	ebad 0d03 	sub.w	sp, sp, r3
 8001ac0:	ab02      	add	r3, sp, #8
 8001ac2:	3300      	adds	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	79ba      	ldrb	r2, [r7, #6]
 8001aca:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8001acc:	2301      	movs	r3, #1
 8001ace:	75fb      	strb	r3, [r7, #23]
 8001ad0:	e00a      	b.n	8001ae8 <ssd1306_I2C_WriteMulti+0x8c>
		dt[i] = data[i-1];
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	441a      	add	r2, r3
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	7811      	ldrb	r1, [r2, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	75fb      	strb	r3, [r7, #23]
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	88ba      	ldrh	r2, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d2ef      	bcs.n	8001ad2 <ssd1306_I2C_WriteMulti+0x76>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	b299      	uxth	r1, r3
 8001af6:	88bb      	ldrh	r3, [r7, #4]
 8001af8:	220a      	movs	r2, #10
 8001afa:	9200      	str	r2, [sp, #0]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4804      	ldr	r0, [pc, #16]	@ (8001b10 <ssd1306_I2C_WriteMulti+0xb4>)
 8001b00:	f000 fdfa 	bl	80026f8 <HAL_I2C_Master_Transmit>
 8001b04:	46b5      	mov	sp, r6
}
 8001b06:	bf00      	nop
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b10:	20000124 	.word	0x20000124

08001b14 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	71bb      	strb	r3, [r7, #6]
 8001b22:	4613      	mov	r3, r2
 8001b24:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b2a:	797b      	ldrb	r3, [r7, #5]
 8001b2c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	b299      	uxth	r1, r3
 8001b32:	f107 020c 	add.w	r2, r7, #12
 8001b36:	230a      	movs	r3, #10
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	4803      	ldr	r0, [pc, #12]	@ (8001b4c <ssd1306_I2C_Write+0x38>)
 8001b3e:	f000 fddb 	bl	80026f8 <HAL_I2C_Master_Transmit>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000124 	.word	0x20000124

08001b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_MspInit+0x5c>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <HAL_MspInit+0x5c>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6193      	str	r3, [r2, #24]
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_MspInit+0x5c>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <HAL_MspInit+0x5c>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a0e      	ldr	r2, [pc, #56]	@ (8001bac <HAL_MspInit+0x5c>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <HAL_MspInit+0x5c>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b86:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <HAL_MspInit+0x60>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <HAL_MspInit+0x60>)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010000 	.word	0x40010000

08001bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a15      	ldr	r2, [pc, #84]	@ (8001c24 <HAL_I2C_MspInit+0x70>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d123      	bne.n	8001c1c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <HAL_I2C_MspInit+0x74>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a13      	ldr	r2, [pc, #76]	@ (8001c28 <HAL_I2C_MspInit+0x74>)
 8001bda:	f043 0308 	orr.w	r3, r3, #8
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_I2C_MspInit+0x74>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bec:	23c0      	movs	r3, #192	@ 0xc0
 8001bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf0:	2312      	movs	r3, #18
 8001bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480b      	ldr	r0, [pc, #44]	@ (8001c2c <HAL_I2C_MspInit+0x78>)
 8001c00:	f000 fa9a 	bl	8002138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <HAL_I2C_MspInit+0x74>)
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <HAL_I2C_MspInit+0x74>)
 8001c0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c0e:	61d3      	str	r3, [r2, #28]
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <HAL_I2C_MspInit+0x74>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40005400 	.word	0x40005400
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010c00 	.word	0x40010c00

08001c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <NMI_Handler+0x4>

08001c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <HardFault_Handler+0x4>

08001c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <MemManage_Handler+0x4>

08001c48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c80:	f000 f936 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return 1;
 8001c8c:	2301      	movs	r3, #1
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <_kill>:

int _kill(int pid, int sig)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ca0:	f001 ff6c 	bl	8003b7c <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2216      	movs	r2, #22
 8001ca8:	601a      	str	r2, [r3, #0]
  return -1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_exit>:

void _exit (int status)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffe7 	bl	8001c96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <_exit+0x12>

08001ccc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e00a      	b.n	8001cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cde:	f3af 8000 	nop.w
 8001ce2:	4601      	mov	r1, r0
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	60ba      	str	r2, [r7, #8]
 8001cea:	b2ca      	uxtb	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dbf0      	blt.n	8001cde <_read+0x12>
  }

  return len;
 8001cfc:	687b      	ldr	r3, [r7, #4]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e009      	b.n	8001d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	60ba      	str	r2, [r7, #8]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbf1      	blt.n	8001d18 <_write+0x12>
  }
  return len;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_close>:

int _close(int file)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d64:	605a      	str	r2, [r3, #4]
  return 0;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <_isatty>:

int _isatty(int file)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
	...

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f001 fed4 	bl	8003b7c <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20005000 	.word	0x20005000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	20000580 	.word	0x20000580
 8001e08:	200006d8 	.word	0x200006d8

08001e0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e18:	f7ff fff8 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e1c:	480b      	ldr	r0, [pc, #44]	@ (8001e4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e1e:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e20:	4a0c      	ldr	r2, [pc, #48]	@ (8001e54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a09      	ldr	r2, [pc, #36]	@ (8001e58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e34:	4c09      	ldr	r4, [pc, #36]	@ (8001e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e42:	f001 fea1 	bl	8003b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e46:	f7fe fb43 	bl	80004d0 <main>
  bx lr
 8001e4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e50:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001e54:	0800497c 	.word	0x0800497c
  ldr r2, =_sbss
 8001e58:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001e5c:	200006d4 	.word	0x200006d4

08001e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <ADC1_2_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <HAL_Init+0x28>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	@ (8001e8c <HAL_Init+0x28>)
 8001e6e:	f043 0310 	orr.w	r3, r3, #16
 8001e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f92b 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fe66 	bl	8001b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f935 	bl	800211e <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 f90b 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	@ (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200000a0 	.word	0x200000a0
 8001ee8:	200000a8 	.word	0x200000a8
 8001eec:	200000a4 	.word	0x200000a4

08001ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <HAL_IncTick+0x1c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_IncTick+0x20>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a03      	ldr	r2, [pc, #12]	@ (8001f10 <HAL_IncTick+0x20>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	200000a8 	.word	0x200000a8
 8001f10:	20000584 	.word	0x20000584

08001f14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b02      	ldr	r3, [pc, #8]	@ (8001f24 <HAL_GetTick+0x10>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	20000584 	.word	0x20000584

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff fff0 	bl	8001f14 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d005      	beq.n	8001f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_Delay+0x44>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4e:	bf00      	nop
 8001f50:	f7ff ffe0 	bl	8001f14 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <HAL_Delay+0x28>
  {
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200000a8 	.word	0x200000a8

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	@ (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	@ (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	@ 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	@ (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff90 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff49 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff5e 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff90 	bl	8002028 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5f 	bl	8001fd4 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffb0 	bl	800208c <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b08b      	sub	sp, #44	@ 0x2c
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	e169      	b.n	8002420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800214c:	2201      	movs	r2, #1
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 8158 	bne.w	800241a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4a9a      	ldr	r2, [pc, #616]	@ (80023d8 <HAL_GPIO_Init+0x2a0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d05e      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002174:	4a98      	ldr	r2, [pc, #608]	@ (80023d8 <HAL_GPIO_Init+0x2a0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d875      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 800217a:	4a98      	ldr	r2, [pc, #608]	@ (80023dc <HAL_GPIO_Init+0x2a4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d058      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002180:	4a96      	ldr	r2, [pc, #600]	@ (80023dc <HAL_GPIO_Init+0x2a4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d86f      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 8002186:	4a96      	ldr	r2, [pc, #600]	@ (80023e0 <HAL_GPIO_Init+0x2a8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d052      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 800218c:	4a94      	ldr	r2, [pc, #592]	@ (80023e0 <HAL_GPIO_Init+0x2a8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d869      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 8002192:	4a94      	ldr	r2, [pc, #592]	@ (80023e4 <HAL_GPIO_Init+0x2ac>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d04c      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 8002198:	4a92      	ldr	r2, [pc, #584]	@ (80023e4 <HAL_GPIO_Init+0x2ac>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d863      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 800219e:	4a92      	ldr	r2, [pc, #584]	@ (80023e8 <HAL_GPIO_Init+0x2b0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d046      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
 80021a4:	4a90      	ldr	r2, [pc, #576]	@ (80023e8 <HAL_GPIO_Init+0x2b0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d85d      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 80021aa:	2b12      	cmp	r3, #18
 80021ac:	d82a      	bhi.n	8002204 <HAL_GPIO_Init+0xcc>
 80021ae:	2b12      	cmp	r3, #18
 80021b0:	d859      	bhi.n	8002266 <HAL_GPIO_Init+0x12e>
 80021b2:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <HAL_GPIO_Init+0x80>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	08002233 	.word	0x08002233
 80021bc:	0800220d 	.word	0x0800220d
 80021c0:	0800221f 	.word	0x0800221f
 80021c4:	08002261 	.word	0x08002261
 80021c8:	08002267 	.word	0x08002267
 80021cc:	08002267 	.word	0x08002267
 80021d0:	08002267 	.word	0x08002267
 80021d4:	08002267 	.word	0x08002267
 80021d8:	08002267 	.word	0x08002267
 80021dc:	08002267 	.word	0x08002267
 80021e0:	08002267 	.word	0x08002267
 80021e4:	08002267 	.word	0x08002267
 80021e8:	08002267 	.word	0x08002267
 80021ec:	08002267 	.word	0x08002267
 80021f0:	08002267 	.word	0x08002267
 80021f4:	08002267 	.word	0x08002267
 80021f8:	08002267 	.word	0x08002267
 80021fc:	08002215 	.word	0x08002215
 8002200:	08002229 	.word	0x08002229
 8002204:	4a79      	ldr	r2, [pc, #484]	@ (80023ec <HAL_GPIO_Init+0x2b4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800220a:	e02c      	b.n	8002266 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	623b      	str	r3, [r7, #32]
          break;
 8002212:	e029      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	3304      	adds	r3, #4
 800221a:	623b      	str	r3, [r7, #32]
          break;
 800221c:	e024      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	3308      	adds	r3, #8
 8002224:	623b      	str	r3, [r7, #32]
          break;
 8002226:	e01f      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	330c      	adds	r3, #12
 800222e:	623b      	str	r3, [r7, #32]
          break;
 8002230:	e01a      	b.n	8002268 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800223a:	2304      	movs	r3, #4
 800223c:	623b      	str	r3, [r7, #32]
          break;
 800223e:	e013      	b.n	8002268 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002248:	2308      	movs	r3, #8
 800224a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	611a      	str	r2, [r3, #16]
          break;
 8002252:	e009      	b.n	8002268 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002254:	2308      	movs	r3, #8
 8002256:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	615a      	str	r2, [r3, #20]
          break;
 800225e:	e003      	b.n	8002268 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x130>
          break;
 8002266:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	@ 0xff
 800226c:	d801      	bhi.n	8002272 <HAL_GPIO_Init+0x13a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	e001      	b.n	8002276 <HAL_GPIO_Init+0x13e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2bff      	cmp	r3, #255	@ 0xff
 800227c:	d802      	bhi.n	8002284 <HAL_GPIO_Init+0x14c>
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	e002      	b.n	800228a <HAL_GPIO_Init+0x152>
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	3b08      	subs	r3, #8
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	210f      	movs	r1, #15
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	6a39      	ldr	r1, [r7, #32]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80b1 	beq.w	800241a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b8:	4b4d      	ldr	r3, [pc, #308]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b4a      	ldr	r3, [pc, #296]	@ (80023f0 <HAL_GPIO_Init+0x2b8>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022d0:	4a48      	ldr	r2, [pc, #288]	@ (80023f4 <HAL_GPIO_Init+0x2bc>)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4013      	ands	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a40      	ldr	r2, [pc, #256]	@ (80023f8 <HAL_GPIO_Init+0x2c0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <HAL_GPIO_Init+0x1ec>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3f      	ldr	r2, [pc, #252]	@ (80023fc <HAL_GPIO_Init+0x2c4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00d      	beq.n	8002320 <HAL_GPIO_Init+0x1e8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3e      	ldr	r2, [pc, #248]	@ (8002400 <HAL_GPIO_Init+0x2c8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <HAL_GPIO_Init+0x1e4>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3d      	ldr	r2, [pc, #244]	@ (8002404 <HAL_GPIO_Init+0x2cc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_GPIO_Init+0x1e0>
 8002314:	2303      	movs	r3, #3
 8002316:	e006      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002318:	2304      	movs	r3, #4
 800231a:	e004      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 800231c:	2302      	movs	r3, #2
 800231e:	e002      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_GPIO_Init+0x1ee>
 8002324:	2300      	movs	r3, #0
 8002326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002328:	f002 0203 	and.w	r2, r2, #3
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	4093      	lsls	r3, r2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002336:	492f      	ldr	r1, [pc, #188]	@ (80023f4 <HAL_GPIO_Init+0x2bc>)
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002350:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	492c      	ldr	r1, [pc, #176]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800235e:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	43db      	mvns	r3, r3
 8002366:	4928      	ldr	r1, [pc, #160]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002368:	4013      	ands	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	4922      	ldr	r1, [pc, #136]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	60cb      	str	r3, [r1, #12]
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002386:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	43db      	mvns	r3, r3
 800238e:	491e      	ldr	r1, [pc, #120]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 8002390:	4013      	ands	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4918      	ldr	r1, [pc, #96]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ae:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4914      	ldr	r1, [pc, #80]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d021      	beq.n	800240c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	490e      	ldr	r1, [pc, #56]	@ (8002408 <HAL_GPIO_Init+0x2d0>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e021      	b.n	800241a <HAL_GPIO_Init+0x2e2>
 80023d6:	bf00      	nop
 80023d8:	10320000 	.word	0x10320000
 80023dc:	10310000 	.word	0x10310000
 80023e0:	10220000 	.word	0x10220000
 80023e4:	10210000 	.word	0x10210000
 80023e8:	10120000 	.word	0x10120000
 80023ec:	10110000 	.word	0x10110000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40010800 	.word	0x40010800
 80023fc:	40010c00 	.word	0x40010c00
 8002400:	40011000 	.word	0x40011000
 8002404:	40011400 	.word	0x40011400
 8002408:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800240c:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_GPIO_Init+0x304>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	43db      	mvns	r3, r3
 8002414:	4909      	ldr	r1, [pc, #36]	@ (800243c <HAL_GPIO_Init+0x304>)
 8002416:	4013      	ands	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	3301      	adds	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	f47f ae8e 	bne.w	800214c <HAL_GPIO_Init+0x14>
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	372c      	adds	r7, #44	@ 0x2c
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	40010400 	.word	0x40010400

08002440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e001      	b.n	8002462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
	...

08002470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e12b      	b.n	80026da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fb8c 	bl	8001bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2224      	movs	r2, #36	@ 0x24
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d4:	f001 f960 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80024d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4a81      	ldr	r2, [pc, #516]	@ (80026e4 <HAL_I2C_Init+0x274>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d807      	bhi.n	80024f4 <HAL_I2C_Init+0x84>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a80      	ldr	r2, [pc, #512]	@ (80026e8 <HAL_I2C_Init+0x278>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	bf94      	ite	ls
 80024ec:	2301      	movls	r3, #1
 80024ee:	2300      	movhi	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e006      	b.n	8002502 <HAL_I2C_Init+0x92>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a7d      	ldr	r2, [pc, #500]	@ (80026ec <HAL_I2C_Init+0x27c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	bf94      	ite	ls
 80024fc:	2301      	movls	r3, #1
 80024fe:	2300      	movhi	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0e7      	b.n	80026da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a78      	ldr	r2, [pc, #480]	@ (80026f0 <HAL_I2C_Init+0x280>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0c9b      	lsrs	r3, r3, #18
 8002514:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	430a      	orrs	r2, r1
 8002528:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a6a      	ldr	r2, [pc, #424]	@ (80026e4 <HAL_I2C_Init+0x274>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d802      	bhi.n	8002544 <HAL_I2C_Init+0xd4>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3301      	adds	r3, #1
 8002542:	e009      	b.n	8002558 <HAL_I2C_Init+0xe8>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	4a69      	ldr	r2, [pc, #420]	@ (80026f4 <HAL_I2C_Init+0x284>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	099b      	lsrs	r3, r3, #6
 8002556:	3301      	adds	r3, #1
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	430b      	orrs	r3, r1
 800255e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800256a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	495c      	ldr	r1, [pc, #368]	@ (80026e4 <HAL_I2C_Init+0x274>)
 8002574:	428b      	cmp	r3, r1
 8002576:	d819      	bhi.n	80025ac <HAL_I2C_Init+0x13c>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e59      	subs	r1, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fbb1 f3f3 	udiv	r3, r1, r3
 8002586:	1c59      	adds	r1, r3, #1
 8002588:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800258c:	400b      	ands	r3, r1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_I2C_Init+0x138>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1e59      	subs	r1, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a6:	e051      	b.n	800264c <HAL_I2C_Init+0x1dc>
 80025a8:	2304      	movs	r3, #4
 80025aa:	e04f      	b.n	800264c <HAL_I2C_Init+0x1dc>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d111      	bne.n	80025d8 <HAL_I2C_Init+0x168>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	440b      	add	r3, r1
 80025c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf0c      	ite	eq
 80025d0:	2301      	moveq	r3, #1
 80025d2:	2300      	movne	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	e012      	b.n	80025fe <HAL_I2C_Init+0x18e>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1e58      	subs	r0, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	0099      	lsls	r1, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Init+0x196>
 8002602:	2301      	movs	r3, #1
 8002604:	e022      	b.n	800264c <HAL_I2C_Init+0x1dc>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10e      	bne.n	800262c <HAL_I2C_Init+0x1bc>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1e58      	subs	r0, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	440b      	add	r3, r1
 800261c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800262a:	e00f      	b.n	800264c <HAL_I2C_Init+0x1dc>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	0099      	lsls	r1, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	6809      	ldr	r1, [r1, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800267a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6911      	ldr	r1, [r2, #16]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68d2      	ldr	r2, [r2, #12]
 8002686:	4311      	orrs	r1, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	430b      	orrs	r3, r1
 800268e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	000186a0 	.word	0x000186a0
 80026e8:	001e847f 	.word	0x001e847f
 80026ec:	003d08ff 	.word	0x003d08ff
 80026f0:	431bde83 	.word	0x431bde83
 80026f4:	10624dd3 	.word	0x10624dd3

080026f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	461a      	mov	r2, r3
 8002704:	460b      	mov	r3, r1
 8002706:	817b      	strh	r3, [r7, #10]
 8002708:	4613      	mov	r3, r2
 800270a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff fc02 	bl	8001f14 <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b20      	cmp	r3, #32
 800271c:	f040 80e0 	bne.w	80028e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2319      	movs	r3, #25
 8002726:	2201      	movs	r2, #1
 8002728:	4970      	ldr	r1, [pc, #448]	@ (80028ec <HAL_I2C_Master_Transmit+0x1f4>)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fa92 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	e0d3      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_I2C_Master_Transmit+0x50>
 8002744:	2302      	movs	r3, #2
 8002746:	e0cc      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d007      	beq.n	800276e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800277c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2221      	movs	r2, #33	@ 0x21
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2210      	movs	r2, #16
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	893a      	ldrh	r2, [r7, #8]
 800279e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4a50      	ldr	r2, [pc, #320]	@ (80028f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80027ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027b0:	8979      	ldrh	r1, [r7, #10]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f9ca 	bl	8002b50 <I2C_MasterRequestWrite>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e08d      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027dc:	e066      	b.n	80028ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fb50 	bl	8002e88 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d107      	bne.n	8002806 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002804:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e06b      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b04      	cmp	r3, #4
 8002846:	d11b      	bne.n	8002880 <HAL_I2C_Master_Transmit+0x188>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	2b00      	cmp	r3, #0
 800284e:	d017      	beq.n	8002880 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	6a39      	ldr	r1, [r7, #32]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fb47 	bl	8002f18 <I2C_WaitOnBTFFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	2b04      	cmp	r3, #4
 8002896:	d107      	bne.n	80028a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e01a      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d194      	bne.n	80027de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	00100002 	.word	0x00100002
 80028f0:	ffff0000 	.word	0xffff0000

080028f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	@ 0x28
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	460b      	mov	r3, r1
 8002902:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fb06 	bl	8001f14 <HAL_GetTick>
 8002908:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	f040 8111 	bne.w	8002b3e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2319      	movs	r3, #25
 8002922:	2201      	movs	r2, #1
 8002924:	4988      	ldr	r1, [pc, #544]	@ (8002b48 <HAL_I2C_IsDeviceReady+0x254>)
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f994 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002932:	2302      	movs	r3, #2
 8002934:	e104      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_I2C_IsDeviceReady+0x50>
 8002940:	2302      	movs	r3, #2
 8002942:	e0fd      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d007      	beq.n	800296a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002978:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2224      	movs	r2, #36	@ 0x24
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a70      	ldr	r2, [pc, #448]	@ (8002b4c <HAL_I2C_IsDeviceReady+0x258>)
 800298c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800299c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f952 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c4:	d103      	bne.n	80029ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029cc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0b6      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fa97 	bl	8001f14 <HAL_GetTick>
 80029e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a16:	e025      	b.n	8002a64 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7ff fa7c 	bl	8001f14 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <HAL_I2C_IsDeviceReady+0x13a>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	22a0      	movs	r2, #160	@ 0xa0
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a6e:	d005      	beq.n	8002a7c <HAL_I2C_IsDeviceReady+0x188>
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <HAL_I2C_IsDeviceReady+0x188>
 8002a76:	7dbb      	ldrb	r3, [r7, #22]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0cd      	beq.n	8002a18 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d129      	bne.n	8002ae6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2319      	movs	r3, #25
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4921      	ldr	r1, [pc, #132]	@ (8002b48 <HAL_I2C_IsDeviceReady+0x254>)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f8c6 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e036      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e02c      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002afe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2319      	movs	r3, #25
 8002b06:	2201      	movs	r2, #1
 8002b08:	490f      	ldr	r1, [pc, #60]	@ (8002b48 <HAL_I2C_IsDeviceReady+0x254>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f8a2 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e012      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	f4ff af32 	bcc.w	800298e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
  }
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	00100002 	.word	0x00100002
 8002b4c:	ffff0000 	.word	0xffff0000

08002b50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d006      	beq.n	8002b7a <I2C_MasterRequestWrite+0x2a>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d003      	beq.n	8002b7a <I2C_MasterRequestWrite+0x2a>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b78:	d108      	bne.n	8002b8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e00b      	b.n	8002ba4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	2b12      	cmp	r3, #18
 8002b92:	d107      	bne.n	8002ba4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ba2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f84f 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bca:	d103      	bne.n	8002bd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e035      	b.n	8002c44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002be0:	d108      	bne.n	8002bf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002be2:	897b      	ldrh	r3, [r7, #10]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bf0:	611a      	str	r2, [r3, #16]
 8002bf2:	e01b      	b.n	8002c2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bf4:	897b      	ldrh	r3, [r7, #10]
 8002bf6:	11db      	asrs	r3, r3, #7
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 0306 	and.w	r3, r3, #6
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f063 030f 	orn	r3, r3, #15
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	490e      	ldr	r1, [pc, #56]	@ (8002c4c <I2C_MasterRequestWrite+0xfc>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f898 	bl	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e010      	b.n	8002c44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4907      	ldr	r1, [pc, #28]	@ (8002c50 <I2C_MasterRequestWrite+0x100>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f888 	bl	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	00010008 	.word	0x00010008
 8002c50:	00010002 	.word	0x00010002

08002c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c64:	e048      	b.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d044      	beq.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6e:	f7ff f951 	bl	8001f14 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d302      	bcc.n	8002c84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d139      	bne.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	0c1b      	lsrs	r3, r3, #16
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d10d      	bne.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	e00c      	b.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d116      	bne.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e023      	b.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	0c1b      	lsrs	r3, r3, #16
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10d      	bne.n	8002d1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	e00c      	b.n	8002d38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d093      	beq.n	8002c66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d56:	e071      	b.n	8002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d66:	d123      	bne.n	8002db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	f043 0204 	orr.w	r2, r3, #4
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e067      	b.n	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d041      	beq.n	8002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db8:	f7ff f8ac 	bl	8001f14 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d302      	bcc.n	8002dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d136      	bne.n	8002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	0c1b      	lsrs	r3, r3, #16
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10c      	bne.n	8002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4013      	ands	r3, r2
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	e00b      	b.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d016      	beq.n	8002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e021      	b.n	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d10c      	bne.n	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e00b      	b.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f47f af6d 	bne.w	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e94:	e034      	b.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f886 	bl	8002fa8 <I2C_IsAcknowledgeFailed>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e034      	b.n	8002f10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d028      	beq.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7ff f831 	bl	8001f14 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d11d      	bne.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ece:	2b80      	cmp	r3, #128	@ 0x80
 8002ed0:	d016      	beq.n	8002f00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e007      	b.n	8002f10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d1c3      	bne.n	8002e96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f24:	e034      	b.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f83e 	bl	8002fa8 <I2C_IsAcknowledgeFailed>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e034      	b.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d028      	beq.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7fe ffe9 	bl	8001f14 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11d      	bne.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d016      	beq.n	8002f90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e007      	b.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d1c3      	bne.n	8002f26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fbe:	d11b      	bne.n	8002ff8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e272      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8087 	beq.w	8003132 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003024:	4b92      	ldr	r3, [pc, #584]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b04      	cmp	r3, #4
 800302e:	d00c      	beq.n	800304a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003030:	4b8f      	ldr	r3, [pc, #572]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d112      	bne.n	8003062 <HAL_RCC_OscConfig+0x5e>
 800303c:	4b8c      	ldr	r3, [pc, #560]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003048:	d10b      	bne.n	8003062 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304a:	4b89      	ldr	r3, [pc, #548]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d06c      	beq.n	8003130 <HAL_RCC_OscConfig+0x12c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d168      	bne.n	8003130 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e24c      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800306a:	d106      	bne.n	800307a <HAL_RCC_OscConfig+0x76>
 800306c:	4b80      	ldr	r3, [pc, #512]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a7f      	ldr	r2, [pc, #508]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	e02e      	b.n	80030d8 <HAL_RCC_OscConfig+0xd4>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x98>
 8003082:	4b7b      	ldr	r3, [pc, #492]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a7a      	ldr	r2, [pc, #488]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b78      	ldr	r3, [pc, #480]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a77      	ldr	r2, [pc, #476]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003094:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0xd4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0xbc>
 80030a6:	4b72      	ldr	r3, [pc, #456]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a71      	ldr	r2, [pc, #452]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0xd4>
 80030c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b68      	ldr	r3, [pc, #416]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a67      	ldr	r2, [pc, #412]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe ff18 	bl	8001f14 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fe ff14 	bl	8001f14 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e200      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0xe4>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe ff04 	bl	8001f14 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe ff00 	bl	8001f14 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	@ 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1ec      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	4b53      	ldr	r3, [pc, #332]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x10c>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d063      	beq.n	8003206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313e:	4b4c      	ldr	r3, [pc, #304]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800314a:	4b49      	ldr	r3, [pc, #292]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b08      	cmp	r3, #8
 8003154:	d11c      	bne.n	8003190 <HAL_RCC_OscConfig+0x18c>
 8003156:	4b46      	ldr	r3, [pc, #280]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d116      	bne.n	8003190 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	4b43      	ldr	r3, [pc, #268]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x176>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1c0      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b3d      	ldr	r3, [pc, #244]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4939      	ldr	r1, [pc, #228]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	e03a      	b.n	8003206 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003198:	4b36      	ldr	r3, [pc, #216]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fe feb9 	bl	8001f14 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fe feb5 	bl	8001f14 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1a1      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4927      	ldr	r1, [pc, #156]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031da:	4b26      	ldr	r3, [pc, #152]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fe98 	bl	8001f14 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fe fe94 	bl	8001f14 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e180      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d03a      	beq.n	8003288 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d019      	beq.n	800324e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321a:	4b17      	ldr	r3, [pc, #92]	@ (8003278 <HAL_RCC_OscConfig+0x274>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003220:	f7fe fe78 	bl	8001f14 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003228:	f7fe fe74 	bl	8001f14 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e160      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323a:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <HAL_RCC_OscConfig+0x26c>)
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003246:	2001      	movs	r0, #1
 8003248:	f000 faba 	bl	80037c0 <RCC_Delay>
 800324c:	e01c      	b.n	8003288 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <HAL_RCC_OscConfig+0x274>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003254:	f7fe fe5e 	bl	8001f14 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325a:	e00f      	b.n	800327c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fe fe5a 	bl	8001f14 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d908      	bls.n	800327c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e146      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	42420000 	.word	0x42420000
 8003278:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	4b92      	ldr	r3, [pc, #584]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e9      	bne.n	800325c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80a6 	beq.w	80033e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b8b      	ldr	r3, [pc, #556]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b88      	ldr	r3, [pc, #544]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4a87      	ldr	r2, [pc, #540]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	61d3      	str	r3, [r2, #28]
 80032b2:	4b85      	ldr	r3, [pc, #532]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b82      	ldr	r3, [pc, #520]	@ (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b7f      	ldr	r3, [pc, #508]	@ (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7e      	ldr	r2, [pc, #504]	@ (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fe fe1b 	bl	8001f14 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fe fe17 	bl	8001f14 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	@ 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e103      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	4b75      	ldr	r3, [pc, #468]	@ (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x312>
 8003308:	4b6f      	ldr	r3, [pc, #444]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4a6e      	ldr	r2, [pc, #440]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6213      	str	r3, [r2, #32]
 8003314:	e02d      	b.n	8003372 <HAL_RCC_OscConfig+0x36e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x334>
 800331e:	4b6a      	ldr	r3, [pc, #424]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4a69      	ldr	r2, [pc, #420]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6213      	str	r3, [r2, #32]
 800332a:	4b67      	ldr	r3, [pc, #412]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	4a66      	ldr	r2, [pc, #408]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6213      	str	r3, [r2, #32]
 8003336:	e01c      	b.n	8003372 <HAL_RCC_OscConfig+0x36e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x356>
 8003340:	4b61      	ldr	r3, [pc, #388]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4a60      	ldr	r2, [pc, #384]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6213      	str	r3, [r2, #32]
 800334c:	4b5e      	ldr	r3, [pc, #376]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4a5d      	ldr	r2, [pc, #372]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6213      	str	r3, [r2, #32]
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0x36e>
 800335a:	4b5b      	ldr	r3, [pc, #364]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a5a      	ldr	r2, [pc, #360]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	4b58      	ldr	r3, [pc, #352]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a57      	ldr	r2, [pc, #348]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337a:	f7fe fdcb 	bl	8001f14 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fe fdc7 	bl	8001f14 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0b1      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b4b      	ldr	r3, [pc, #300]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ee      	beq.n	8003382 <HAL_RCC_OscConfig+0x37e>
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fe fdb5 	bl	8001f14 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fe fdb1 	bl	8001f14 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e09b      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	4b40      	ldr	r3, [pc, #256]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b3c      	ldr	r3, [pc, #240]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4a3b      	ldr	r2, [pc, #236]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8087 	beq.w	80034fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ec:	4b36      	ldr	r3, [pc, #216]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d061      	beq.n	80034bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d146      	bne.n	800348e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003400:	4b33      	ldr	r3, [pc, #204]	@ (80034d0 <HAL_RCC_OscConfig+0x4cc>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fe fd85 	bl	8001f14 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fe fd81 	bl	8001f14 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e06d      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003420:	4b29      	ldr	r3, [pc, #164]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003434:	d108      	bne.n	8003448 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003436:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4921      	ldr	r1, [pc, #132]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003448:	4b1f      	ldr	r3, [pc, #124]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a19      	ldr	r1, [r3, #32]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	430b      	orrs	r3, r1
 800345a:	491b      	ldr	r1, [pc, #108]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003460:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <HAL_RCC_OscConfig+0x4cc>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fe fd55 	bl	8001f14 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe fd51 	bl	8001f14 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e03d      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003480:	4b11      	ldr	r3, [pc, #68]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x46a>
 800348c:	e035      	b.n	80034fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <HAL_RCC_OscConfig+0x4cc>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe fd3e 	bl	8001f14 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe fd3a 	bl	8001f14 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e026      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ae:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x498>
 80034ba:	e01e      	b.n	80034fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e019      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40007000 	.word	0x40007000
 80034d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_RCC_OscConfig+0x500>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000

08003508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0d0      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b6a      	ldr	r3, [pc, #424]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d910      	bls.n	800354c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b67      	ldr	r3, [pc, #412]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 0207 	bic.w	r2, r3, #7
 8003532:	4965      	ldr	r1, [pc, #404]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b63      	ldr	r3, [pc, #396]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b8      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003564:	4b59      	ldr	r3, [pc, #356]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a58      	ldr	r2, [pc, #352]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800356e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800357c:	4b53      	ldr	r3, [pc, #332]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a52      	ldr	r2, [pc, #328]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b50      	ldr	r3, [pc, #320]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	494d      	ldr	r1, [pc, #308]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d040      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b47      	ldr	r3, [pc, #284]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d115      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07f      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b41      	ldr	r3, [pc, #260]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e073      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3d      	ldr	r3, [pc, #244]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06b      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b39      	ldr	r3, [pc, #228]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4936      	ldr	r1, [pc, #216]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fe fc8c 	bl	8001f14 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fe fc88 	bl	8001f14 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e053      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2d      	ldr	r3, [pc, #180]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b27      	ldr	r3, [pc, #156]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d210      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b24      	ldr	r3, [pc, #144]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 0207 	bic.w	r2, r3, #7
 800363e:	4922      	ldr	r1, [pc, #136]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e032      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4916      	ldr	r1, [pc, #88]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003682:	4b12      	ldr	r3, [pc, #72]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	490e      	ldr	r1, [pc, #56]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003696:	f000 f821 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c8>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <HAL_RCC_ClockConfig+0x1cc>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_RCC_ClockConfig+0x1d0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fbea 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40021000 	.word	0x40021000
 80036d0:	0800486c 	.word	0x0800486c
 80036d4:	200000a0 	.word	0x200000a0
 80036d8:	200000a4 	.word	0x200000a4

080036dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x94>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b04      	cmp	r3, #4
 8003704:	d002      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x30>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x36>
 800370a:	e027      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800370c:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x98>)
 800370e:	613b      	str	r3, [r7, #16]
      break;
 8003710:	e027      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	0c9b      	lsrs	r3, r3, #18
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	4a17      	ldr	r2, [pc, #92]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x9c>)
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d010      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800372a:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x94>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	0c5b      	lsrs	r3, r3, #17
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	4a11      	ldr	r2, [pc, #68]	@ (800377c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a0d      	ldr	r2, [pc, #52]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x98>)
 800373e:	fb03 f202 	mul.w	r2, r3, r2
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e004      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0c      	ldr	r2, [pc, #48]	@ (8003780 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	613b      	str	r3, [r7, #16]
      break;
 800375a:	e002      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x98>)
 800375e:	613b      	str	r3, [r7, #16]
      break;
 8003760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003762:	693b      	ldr	r3, [r7, #16]
}
 8003764:	4618      	mov	r0, r3
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	007a1200 	.word	0x007a1200
 8003778:	08004884 	.word	0x08004884
 800377c:	08004894 	.word	0x08004894
 8003780:	003d0900 	.word	0x003d0900

08003784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003788:	4b02      	ldr	r3, [pc, #8]	@ (8003794 <HAL_RCC_GetHCLKFreq+0x10>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	200000a0 	.word	0x200000a0

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff2 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	@ (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	0800487c 	.word	0x0800487c

080037c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037c8:	4b0a      	ldr	r3, [pc, #40]	@ (80037f4 <RCC_Delay+0x34>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <RCC_Delay+0x38>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0a5b      	lsrs	r3, r3, #9
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037dc:	bf00      	nop
  }
  while (Delay --);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1e5a      	subs	r2, r3, #1
 80037e2:	60fa      	str	r2, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f9      	bne.n	80037dc <RCC_Delay+0x1c>
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	200000a0 	.word	0x200000a0
 80037f8:	10624dd3 	.word	0x10624dd3

080037fc <srand>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4b10      	ldr	r3, [pc, #64]	@ (8003840 <srand+0x44>)
 8003800:	4604      	mov	r4, r0
 8003802:	681d      	ldr	r5, [r3, #0]
 8003804:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003806:	b9b3      	cbnz	r3, 8003836 <srand+0x3a>
 8003808:	2018      	movs	r0, #24
 800380a:	f000 fa4b 	bl	8003ca4 <malloc>
 800380e:	4602      	mov	r2, r0
 8003810:	6328      	str	r0, [r5, #48]	@ 0x30
 8003812:	b920      	cbnz	r0, 800381e <srand+0x22>
 8003814:	2146      	movs	r1, #70	@ 0x46
 8003816:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <srand+0x48>)
 8003818:	480b      	ldr	r0, [pc, #44]	@ (8003848 <srand+0x4c>)
 800381a:	f000 f9dd 	bl	8003bd8 <__assert_func>
 800381e:	490b      	ldr	r1, [pc, #44]	@ (800384c <srand+0x50>)
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <srand+0x54>)
 8003822:	e9c0 1300 	strd	r1, r3, [r0]
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <srand+0x58>)
 8003828:	2100      	movs	r1, #0
 800382a:	6083      	str	r3, [r0, #8]
 800382c:	230b      	movs	r3, #11
 800382e:	8183      	strh	r3, [r0, #12]
 8003830:	2001      	movs	r0, #1
 8003832:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003836:	2200      	movs	r2, #0
 8003838:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800383a:	611c      	str	r4, [r3, #16]
 800383c:	615a      	str	r2, [r3, #20]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	200000b8 	.word	0x200000b8
 8003844:	08004896 	.word	0x08004896
 8003848:	080048ad 	.word	0x080048ad
 800384c:	abcd330e 	.word	0xabcd330e
 8003850:	e66d1234 	.word	0xe66d1234
 8003854:	0005deec 	.word	0x0005deec

08003858 <rand>:
 8003858:	4b16      	ldr	r3, [pc, #88]	@ (80038b4 <rand+0x5c>)
 800385a:	b510      	push	{r4, lr}
 800385c:	681c      	ldr	r4, [r3, #0]
 800385e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003860:	b9b3      	cbnz	r3, 8003890 <rand+0x38>
 8003862:	2018      	movs	r0, #24
 8003864:	f000 fa1e 	bl	8003ca4 <malloc>
 8003868:	4602      	mov	r2, r0
 800386a:	6320      	str	r0, [r4, #48]	@ 0x30
 800386c:	b920      	cbnz	r0, 8003878 <rand+0x20>
 800386e:	2152      	movs	r1, #82	@ 0x52
 8003870:	4b11      	ldr	r3, [pc, #68]	@ (80038b8 <rand+0x60>)
 8003872:	4812      	ldr	r0, [pc, #72]	@ (80038bc <rand+0x64>)
 8003874:	f000 f9b0 	bl	8003bd8 <__assert_func>
 8003878:	4911      	ldr	r1, [pc, #68]	@ (80038c0 <rand+0x68>)
 800387a:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <rand+0x6c>)
 800387c:	e9c0 1300 	strd	r1, r3, [r0]
 8003880:	4b11      	ldr	r3, [pc, #68]	@ (80038c8 <rand+0x70>)
 8003882:	2100      	movs	r1, #0
 8003884:	6083      	str	r3, [r0, #8]
 8003886:	230b      	movs	r3, #11
 8003888:	8183      	strh	r3, [r0, #12]
 800388a:	2001      	movs	r0, #1
 800388c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003890:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003892:	480e      	ldr	r0, [pc, #56]	@ (80038cc <rand+0x74>)
 8003894:	690b      	ldr	r3, [r1, #16]
 8003896:	694c      	ldr	r4, [r1, #20]
 8003898:	4358      	muls	r0, r3
 800389a:	4a0d      	ldr	r2, [pc, #52]	@ (80038d0 <rand+0x78>)
 800389c:	fb02 0004 	mla	r0, r2, r4, r0
 80038a0:	fba3 3202 	umull	r3, r2, r3, r2
 80038a4:	3301      	adds	r3, #1
 80038a6:	eb40 0002 	adc.w	r0, r0, r2
 80038aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80038ae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80038b2:	bd10      	pop	{r4, pc}
 80038b4:	200000b8 	.word	0x200000b8
 80038b8:	08004896 	.word	0x08004896
 80038bc:	080048ad 	.word	0x080048ad
 80038c0:	abcd330e 	.word	0xabcd330e
 80038c4:	e66d1234 	.word	0xe66d1234
 80038c8:	0005deec 	.word	0x0005deec
 80038cc:	5851f42d 	.word	0x5851f42d
 80038d0:	4c957f2d 	.word	0x4c957f2d

080038d4 <std>:
 80038d4:	2300      	movs	r3, #0
 80038d6:	b510      	push	{r4, lr}
 80038d8:	4604      	mov	r4, r0
 80038da:	e9c0 3300 	strd	r3, r3, [r0]
 80038de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038e2:	6083      	str	r3, [r0, #8]
 80038e4:	8181      	strh	r1, [r0, #12]
 80038e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80038e8:	81c2      	strh	r2, [r0, #14]
 80038ea:	6183      	str	r3, [r0, #24]
 80038ec:	4619      	mov	r1, r3
 80038ee:	2208      	movs	r2, #8
 80038f0:	305c      	adds	r0, #92	@ 0x5c
 80038f2:	f000 f8f4 	bl	8003ade <memset>
 80038f6:	4b0d      	ldr	r3, [pc, #52]	@ (800392c <std+0x58>)
 80038f8:	6224      	str	r4, [r4, #32]
 80038fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80038fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <std+0x5c>)
 80038fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <std+0x60>)
 8003902:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003904:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <std+0x64>)
 8003906:	6323      	str	r3, [r4, #48]	@ 0x30
 8003908:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <std+0x68>)
 800390a:	429c      	cmp	r4, r3
 800390c:	d006      	beq.n	800391c <std+0x48>
 800390e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003912:	4294      	cmp	r4, r2
 8003914:	d002      	beq.n	800391c <std+0x48>
 8003916:	33d0      	adds	r3, #208	@ 0xd0
 8003918:	429c      	cmp	r4, r3
 800391a:	d105      	bne.n	8003928 <std+0x54>
 800391c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003924:	f000 b954 	b.w	8003bd0 <__retarget_lock_init_recursive>
 8003928:	bd10      	pop	{r4, pc}
 800392a:	bf00      	nop
 800392c:	08003a59 	.word	0x08003a59
 8003930:	08003a7b 	.word	0x08003a7b
 8003934:	08003ab3 	.word	0x08003ab3
 8003938:	08003ad7 	.word	0x08003ad7
 800393c:	20000588 	.word	0x20000588

08003940 <stdio_exit_handler>:
 8003940:	4a02      	ldr	r2, [pc, #8]	@ (800394c <stdio_exit_handler+0xc>)
 8003942:	4903      	ldr	r1, [pc, #12]	@ (8003950 <stdio_exit_handler+0x10>)
 8003944:	4803      	ldr	r0, [pc, #12]	@ (8003954 <stdio_exit_handler+0x14>)
 8003946:	f000 b869 	b.w	8003a1c <_fwalk_sglue>
 800394a:	bf00      	nop
 800394c:	200000ac 	.word	0x200000ac
 8003950:	08003f11 	.word	0x08003f11
 8003954:	200000bc 	.word	0x200000bc

08003958 <cleanup_stdio>:
 8003958:	6841      	ldr	r1, [r0, #4]
 800395a:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <cleanup_stdio+0x34>)
 800395c:	b510      	push	{r4, lr}
 800395e:	4299      	cmp	r1, r3
 8003960:	4604      	mov	r4, r0
 8003962:	d001      	beq.n	8003968 <cleanup_stdio+0x10>
 8003964:	f000 fad4 	bl	8003f10 <_fflush_r>
 8003968:	68a1      	ldr	r1, [r4, #8]
 800396a:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <cleanup_stdio+0x38>)
 800396c:	4299      	cmp	r1, r3
 800396e:	d002      	beq.n	8003976 <cleanup_stdio+0x1e>
 8003970:	4620      	mov	r0, r4
 8003972:	f000 facd 	bl	8003f10 <_fflush_r>
 8003976:	68e1      	ldr	r1, [r4, #12]
 8003978:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <cleanup_stdio+0x3c>)
 800397a:	4299      	cmp	r1, r3
 800397c:	d004      	beq.n	8003988 <cleanup_stdio+0x30>
 800397e:	4620      	mov	r0, r4
 8003980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003984:	f000 bac4 	b.w	8003f10 <_fflush_r>
 8003988:	bd10      	pop	{r4, pc}
 800398a:	bf00      	nop
 800398c:	20000588 	.word	0x20000588
 8003990:	200005f0 	.word	0x200005f0
 8003994:	20000658 	.word	0x20000658

08003998 <global_stdio_init.part.0>:
 8003998:	b510      	push	{r4, lr}
 800399a:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <global_stdio_init.part.0+0x30>)
 800399c:	4c0b      	ldr	r4, [pc, #44]	@ (80039cc <global_stdio_init.part.0+0x34>)
 800399e:	4a0c      	ldr	r2, [pc, #48]	@ (80039d0 <global_stdio_init.part.0+0x38>)
 80039a0:	4620      	mov	r0, r4
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	2104      	movs	r1, #4
 80039a6:	2200      	movs	r2, #0
 80039a8:	f7ff ff94 	bl	80038d4 <std>
 80039ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80039b0:	2201      	movs	r2, #1
 80039b2:	2109      	movs	r1, #9
 80039b4:	f7ff ff8e 	bl	80038d4 <std>
 80039b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80039bc:	2202      	movs	r2, #2
 80039be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c2:	2112      	movs	r1, #18
 80039c4:	f7ff bf86 	b.w	80038d4 <std>
 80039c8:	200006c0 	.word	0x200006c0
 80039cc:	20000588 	.word	0x20000588
 80039d0:	08003941 	.word	0x08003941

080039d4 <__sfp_lock_acquire>:
 80039d4:	4801      	ldr	r0, [pc, #4]	@ (80039dc <__sfp_lock_acquire+0x8>)
 80039d6:	f000 b8fc 	b.w	8003bd2 <__retarget_lock_acquire_recursive>
 80039da:	bf00      	nop
 80039dc:	200006c9 	.word	0x200006c9

080039e0 <__sfp_lock_release>:
 80039e0:	4801      	ldr	r0, [pc, #4]	@ (80039e8 <__sfp_lock_release+0x8>)
 80039e2:	f000 b8f7 	b.w	8003bd4 <__retarget_lock_release_recursive>
 80039e6:	bf00      	nop
 80039e8:	200006c9 	.word	0x200006c9

080039ec <__sinit>:
 80039ec:	b510      	push	{r4, lr}
 80039ee:	4604      	mov	r4, r0
 80039f0:	f7ff fff0 	bl	80039d4 <__sfp_lock_acquire>
 80039f4:	6a23      	ldr	r3, [r4, #32]
 80039f6:	b11b      	cbz	r3, 8003a00 <__sinit+0x14>
 80039f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039fc:	f7ff bff0 	b.w	80039e0 <__sfp_lock_release>
 8003a00:	4b04      	ldr	r3, [pc, #16]	@ (8003a14 <__sinit+0x28>)
 8003a02:	6223      	str	r3, [r4, #32]
 8003a04:	4b04      	ldr	r3, [pc, #16]	@ (8003a18 <__sinit+0x2c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f5      	bne.n	80039f8 <__sinit+0xc>
 8003a0c:	f7ff ffc4 	bl	8003998 <global_stdio_init.part.0>
 8003a10:	e7f2      	b.n	80039f8 <__sinit+0xc>
 8003a12:	bf00      	nop
 8003a14:	08003959 	.word	0x08003959
 8003a18:	200006c0 	.word	0x200006c0

08003a1c <_fwalk_sglue>:
 8003a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a20:	4607      	mov	r7, r0
 8003a22:	4688      	mov	r8, r1
 8003a24:	4614      	mov	r4, r2
 8003a26:	2600      	movs	r6, #0
 8003a28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a2c:	f1b9 0901 	subs.w	r9, r9, #1
 8003a30:	d505      	bpl.n	8003a3e <_fwalk_sglue+0x22>
 8003a32:	6824      	ldr	r4, [r4, #0]
 8003a34:	2c00      	cmp	r4, #0
 8003a36:	d1f7      	bne.n	8003a28 <_fwalk_sglue+0xc>
 8003a38:	4630      	mov	r0, r6
 8003a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a3e:	89ab      	ldrh	r3, [r5, #12]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d907      	bls.n	8003a54 <_fwalk_sglue+0x38>
 8003a44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	d003      	beq.n	8003a54 <_fwalk_sglue+0x38>
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	4638      	mov	r0, r7
 8003a50:	47c0      	blx	r8
 8003a52:	4306      	orrs	r6, r0
 8003a54:	3568      	adds	r5, #104	@ 0x68
 8003a56:	e7e9      	b.n	8003a2c <_fwalk_sglue+0x10>

08003a58 <__sread>:
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a60:	f000 f868 	bl	8003b34 <_read_r>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	bfab      	itete	ge
 8003a68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a6c:	181b      	addge	r3, r3, r0
 8003a6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a72:	bfac      	ite	ge
 8003a74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a76:	81a3      	strhlt	r3, [r4, #12]
 8003a78:	bd10      	pop	{r4, pc}

08003a7a <__swrite>:
 8003a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7e:	461f      	mov	r7, r3
 8003a80:	898b      	ldrh	r3, [r1, #12]
 8003a82:	4605      	mov	r5, r0
 8003a84:	05db      	lsls	r3, r3, #23
 8003a86:	460c      	mov	r4, r1
 8003a88:	4616      	mov	r6, r2
 8003a8a:	d505      	bpl.n	8003a98 <__swrite+0x1e>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a94:	f000 f83c 	bl	8003b10 <_lseek_r>
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	4632      	mov	r2, r6
 8003a9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aae:	f000 b853 	b.w	8003b58 <_write_r>

08003ab2 <__sseek>:
 8003ab2:	b510      	push	{r4, lr}
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aba:	f000 f829 	bl	8003b10 <_lseek_r>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	bf15      	itete	ne
 8003ac4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ac6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003aca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ace:	81a3      	strheq	r3, [r4, #12]
 8003ad0:	bf18      	it	ne
 8003ad2:	81a3      	strhne	r3, [r4, #12]
 8003ad4:	bd10      	pop	{r4, pc}

08003ad6 <__sclose>:
 8003ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ada:	f000 b809 	b.w	8003af0 <_close_r>

08003ade <memset>:
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4402      	add	r2, r0
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d100      	bne.n	8003ae8 <memset+0xa>
 8003ae6:	4770      	bx	lr
 8003ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8003aec:	e7f9      	b.n	8003ae2 <memset+0x4>
	...

08003af0 <_close_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	2300      	movs	r3, #0
 8003af4:	4d05      	ldr	r5, [pc, #20]	@ (8003b0c <_close_r+0x1c>)
 8003af6:	4604      	mov	r4, r0
 8003af8:	4608      	mov	r0, r1
 8003afa:	602b      	str	r3, [r5, #0]
 8003afc:	f7fe f91f 	bl	8001d3e <_close>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_close_r+0x1a>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_close_r+0x1a>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	200006c4 	.word	0x200006c4

08003b10 <_lseek_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	2200      	movs	r2, #0
 8003b1a:	4d05      	ldr	r5, [pc, #20]	@ (8003b30 <_lseek_r+0x20>)
 8003b1c:	602a      	str	r2, [r5, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f7fe f931 	bl	8001d86 <_lseek>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_lseek_r+0x1e>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_lseek_r+0x1e>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	200006c4 	.word	0x200006c4

08003b34 <_read_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4604      	mov	r4, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4d05      	ldr	r5, [pc, #20]	@ (8003b54 <_read_r+0x20>)
 8003b40:	602a      	str	r2, [r5, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7fe f8c2 	bl	8001ccc <_read>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d102      	bne.n	8003b52 <_read_r+0x1e>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	b103      	cbz	r3, 8003b52 <_read_r+0x1e>
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	200006c4 	.word	0x200006c4

08003b58 <_write_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	2200      	movs	r2, #0
 8003b62:	4d05      	ldr	r5, [pc, #20]	@ (8003b78 <_write_r+0x20>)
 8003b64:	602a      	str	r2, [r5, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f7fe f8cd 	bl	8001d06 <_write>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d102      	bne.n	8003b76 <_write_r+0x1e>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	b103      	cbz	r3, 8003b76 <_write_r+0x1e>
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	200006c4 	.word	0x200006c4

08003b7c <__errno>:
 8003b7c:	4b01      	ldr	r3, [pc, #4]	@ (8003b84 <__errno+0x8>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	200000b8 	.word	0x200000b8

08003b88 <__libc_init_array>:
 8003b88:	b570      	push	{r4, r5, r6, lr}
 8003b8a:	2600      	movs	r6, #0
 8003b8c:	4d0c      	ldr	r5, [pc, #48]	@ (8003bc0 <__libc_init_array+0x38>)
 8003b8e:	4c0d      	ldr	r4, [pc, #52]	@ (8003bc4 <__libc_init_array+0x3c>)
 8003b90:	1b64      	subs	r4, r4, r5
 8003b92:	10a4      	asrs	r4, r4, #2
 8003b94:	42a6      	cmp	r6, r4
 8003b96:	d109      	bne.n	8003bac <__libc_init_array+0x24>
 8003b98:	f000 fe46 	bl	8004828 <_init>
 8003b9c:	2600      	movs	r6, #0
 8003b9e:	4d0a      	ldr	r5, [pc, #40]	@ (8003bc8 <__libc_init_array+0x40>)
 8003ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8003bcc <__libc_init_array+0x44>)
 8003ba2:	1b64      	subs	r4, r4, r5
 8003ba4:	10a4      	asrs	r4, r4, #2
 8003ba6:	42a6      	cmp	r6, r4
 8003ba8:	d105      	bne.n	8003bb6 <__libc_init_array+0x2e>
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
 8003bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb0:	4798      	blx	r3
 8003bb2:	3601      	adds	r6, #1
 8003bb4:	e7ee      	b.n	8003b94 <__libc_init_array+0xc>
 8003bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bba:	4798      	blx	r3
 8003bbc:	3601      	adds	r6, #1
 8003bbe:	e7f2      	b.n	8003ba6 <__libc_init_array+0x1e>
 8003bc0:	08004974 	.word	0x08004974
 8003bc4:	08004974 	.word	0x08004974
 8003bc8:	08004974 	.word	0x08004974
 8003bcc:	08004978 	.word	0x08004978

08003bd0 <__retarget_lock_init_recursive>:
 8003bd0:	4770      	bx	lr

08003bd2 <__retarget_lock_acquire_recursive>:
 8003bd2:	4770      	bx	lr

08003bd4 <__retarget_lock_release_recursive>:
 8003bd4:	4770      	bx	lr
	...

08003bd8 <__assert_func>:
 8003bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003bda:	4614      	mov	r4, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <__assert_func+0x2c>)
 8003be0:	4605      	mov	r5, r0
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68d8      	ldr	r0, [r3, #12]
 8003be6:	b954      	cbnz	r4, 8003bfe <__assert_func+0x26>
 8003be8:	4b07      	ldr	r3, [pc, #28]	@ (8003c08 <__assert_func+0x30>)
 8003bea:	461c      	mov	r4, r3
 8003bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003bf0:	9100      	str	r1, [sp, #0]
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	4905      	ldr	r1, [pc, #20]	@ (8003c0c <__assert_func+0x34>)
 8003bf6:	f000 f9b3 	bl	8003f60 <fiprintf>
 8003bfa:	f000 f9d3 	bl	8003fa4 <abort>
 8003bfe:	4b04      	ldr	r3, [pc, #16]	@ (8003c10 <__assert_func+0x38>)
 8003c00:	e7f4      	b.n	8003bec <__assert_func+0x14>
 8003c02:	bf00      	nop
 8003c04:	200000b8 	.word	0x200000b8
 8003c08:	08004940 	.word	0x08004940
 8003c0c:	08004912 	.word	0x08004912
 8003c10:	08004905 	.word	0x08004905

08003c14 <_free_r>:
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	4605      	mov	r5, r0
 8003c18:	2900      	cmp	r1, #0
 8003c1a:	d040      	beq.n	8003c9e <_free_r+0x8a>
 8003c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c20:	1f0c      	subs	r4, r1, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bfb8      	it	lt
 8003c26:	18e4      	addlt	r4, r4, r3
 8003c28:	f000 f8e6 	bl	8003df8 <__malloc_lock>
 8003c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca0 <_free_r+0x8c>)
 8003c2e:	6813      	ldr	r3, [r2, #0]
 8003c30:	b933      	cbnz	r3, 8003c40 <_free_r+0x2c>
 8003c32:	6063      	str	r3, [r4, #4]
 8003c34:	6014      	str	r4, [r2, #0]
 8003c36:	4628      	mov	r0, r5
 8003c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c3c:	f000 b8e2 	b.w	8003e04 <__malloc_unlock>
 8003c40:	42a3      	cmp	r3, r4
 8003c42:	d908      	bls.n	8003c56 <_free_r+0x42>
 8003c44:	6820      	ldr	r0, [r4, #0]
 8003c46:	1821      	adds	r1, r4, r0
 8003c48:	428b      	cmp	r3, r1
 8003c4a:	bf01      	itttt	eq
 8003c4c:	6819      	ldreq	r1, [r3, #0]
 8003c4e:	685b      	ldreq	r3, [r3, #4]
 8003c50:	1809      	addeq	r1, r1, r0
 8003c52:	6021      	streq	r1, [r4, #0]
 8003c54:	e7ed      	b.n	8003c32 <_free_r+0x1e>
 8003c56:	461a      	mov	r2, r3
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	b10b      	cbz	r3, 8003c60 <_free_r+0x4c>
 8003c5c:	42a3      	cmp	r3, r4
 8003c5e:	d9fa      	bls.n	8003c56 <_free_r+0x42>
 8003c60:	6811      	ldr	r1, [r2, #0]
 8003c62:	1850      	adds	r0, r2, r1
 8003c64:	42a0      	cmp	r0, r4
 8003c66:	d10b      	bne.n	8003c80 <_free_r+0x6c>
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	4401      	add	r1, r0
 8003c6c:	1850      	adds	r0, r2, r1
 8003c6e:	4283      	cmp	r3, r0
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	d1e0      	bne.n	8003c36 <_free_r+0x22>
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	4408      	add	r0, r1
 8003c7a:	6010      	str	r0, [r2, #0]
 8003c7c:	6053      	str	r3, [r2, #4]
 8003c7e:	e7da      	b.n	8003c36 <_free_r+0x22>
 8003c80:	d902      	bls.n	8003c88 <_free_r+0x74>
 8003c82:	230c      	movs	r3, #12
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	e7d6      	b.n	8003c36 <_free_r+0x22>
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	1821      	adds	r1, r4, r0
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	bf01      	itttt	eq
 8003c90:	6819      	ldreq	r1, [r3, #0]
 8003c92:	685b      	ldreq	r3, [r3, #4]
 8003c94:	1809      	addeq	r1, r1, r0
 8003c96:	6021      	streq	r1, [r4, #0]
 8003c98:	6063      	str	r3, [r4, #4]
 8003c9a:	6054      	str	r4, [r2, #4]
 8003c9c:	e7cb      	b.n	8003c36 <_free_r+0x22>
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	200006d0 	.word	0x200006d0

08003ca4 <malloc>:
 8003ca4:	4b02      	ldr	r3, [pc, #8]	@ (8003cb0 <malloc+0xc>)
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	f000 b825 	b.w	8003cf8 <_malloc_r>
 8003cae:	bf00      	nop
 8003cb0:	200000b8 	.word	0x200000b8

08003cb4 <sbrk_aligned>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8003cf4 <sbrk_aligned+0x40>)
 8003cb8:	460c      	mov	r4, r1
 8003cba:	6831      	ldr	r1, [r6, #0]
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	b911      	cbnz	r1, 8003cc6 <sbrk_aligned+0x12>
 8003cc0:	f000 f960 	bl	8003f84 <_sbrk_r>
 8003cc4:	6030      	str	r0, [r6, #0]
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 f95b 	bl	8003f84 <_sbrk_r>
 8003cce:	1c43      	adds	r3, r0, #1
 8003cd0:	d103      	bne.n	8003cda <sbrk_aligned+0x26>
 8003cd2:	f04f 34ff 	mov.w	r4, #4294967295
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
 8003cda:	1cc4      	adds	r4, r0, #3
 8003cdc:	f024 0403 	bic.w	r4, r4, #3
 8003ce0:	42a0      	cmp	r0, r4
 8003ce2:	d0f8      	beq.n	8003cd6 <sbrk_aligned+0x22>
 8003ce4:	1a21      	subs	r1, r4, r0
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f000 f94c 	bl	8003f84 <_sbrk_r>
 8003cec:	3001      	adds	r0, #1
 8003cee:	d1f2      	bne.n	8003cd6 <sbrk_aligned+0x22>
 8003cf0:	e7ef      	b.n	8003cd2 <sbrk_aligned+0x1e>
 8003cf2:	bf00      	nop
 8003cf4:	200006cc 	.word	0x200006cc

08003cf8 <_malloc_r>:
 8003cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cfc:	1ccd      	adds	r5, r1, #3
 8003cfe:	f025 0503 	bic.w	r5, r5, #3
 8003d02:	3508      	adds	r5, #8
 8003d04:	2d0c      	cmp	r5, #12
 8003d06:	bf38      	it	cc
 8003d08:	250c      	movcc	r5, #12
 8003d0a:	2d00      	cmp	r5, #0
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	db01      	blt.n	8003d14 <_malloc_r+0x1c>
 8003d10:	42a9      	cmp	r1, r5
 8003d12:	d904      	bls.n	8003d1e <_malloc_r+0x26>
 8003d14:	230c      	movs	r3, #12
 8003d16:	6033      	str	r3, [r6, #0]
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003df4 <_malloc_r+0xfc>
 8003d22:	f000 f869 	bl	8003df8 <__malloc_lock>
 8003d26:	f8d8 3000 	ldr.w	r3, [r8]
 8003d2a:	461c      	mov	r4, r3
 8003d2c:	bb44      	cbnz	r4, 8003d80 <_malloc_r+0x88>
 8003d2e:	4629      	mov	r1, r5
 8003d30:	4630      	mov	r0, r6
 8003d32:	f7ff ffbf 	bl	8003cb4 <sbrk_aligned>
 8003d36:	1c43      	adds	r3, r0, #1
 8003d38:	4604      	mov	r4, r0
 8003d3a:	d158      	bne.n	8003dee <_malloc_r+0xf6>
 8003d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d40:	4627      	mov	r7, r4
 8003d42:	2f00      	cmp	r7, #0
 8003d44:	d143      	bne.n	8003dce <_malloc_r+0xd6>
 8003d46:	2c00      	cmp	r4, #0
 8003d48:	d04b      	beq.n	8003de2 <_malloc_r+0xea>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	4630      	mov	r0, r6
 8003d50:	eb04 0903 	add.w	r9, r4, r3
 8003d54:	f000 f916 	bl	8003f84 <_sbrk_r>
 8003d58:	4581      	cmp	r9, r0
 8003d5a:	d142      	bne.n	8003de2 <_malloc_r+0xea>
 8003d5c:	6821      	ldr	r1, [r4, #0]
 8003d5e:	4630      	mov	r0, r6
 8003d60:	1a6d      	subs	r5, r5, r1
 8003d62:	4629      	mov	r1, r5
 8003d64:	f7ff ffa6 	bl	8003cb4 <sbrk_aligned>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d03a      	beq.n	8003de2 <_malloc_r+0xea>
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	442b      	add	r3, r5
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	f8d8 3000 	ldr.w	r3, [r8]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	bb62      	cbnz	r2, 8003dd4 <_malloc_r+0xdc>
 8003d7a:	f8c8 7000 	str.w	r7, [r8]
 8003d7e:	e00f      	b.n	8003da0 <_malloc_r+0xa8>
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	1b52      	subs	r2, r2, r5
 8003d84:	d420      	bmi.n	8003dc8 <_malloc_r+0xd0>
 8003d86:	2a0b      	cmp	r2, #11
 8003d88:	d917      	bls.n	8003dba <_malloc_r+0xc2>
 8003d8a:	1961      	adds	r1, r4, r5
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	6025      	str	r5, [r4, #0]
 8003d90:	bf18      	it	ne
 8003d92:	6059      	strne	r1, [r3, #4]
 8003d94:	6863      	ldr	r3, [r4, #4]
 8003d96:	bf08      	it	eq
 8003d98:	f8c8 1000 	streq.w	r1, [r8]
 8003d9c:	5162      	str	r2, [r4, r5]
 8003d9e:	604b      	str	r3, [r1, #4]
 8003da0:	4630      	mov	r0, r6
 8003da2:	f000 f82f 	bl	8003e04 <__malloc_unlock>
 8003da6:	f104 000b 	add.w	r0, r4, #11
 8003daa:	1d23      	adds	r3, r4, #4
 8003dac:	f020 0007 	bic.w	r0, r0, #7
 8003db0:	1ac2      	subs	r2, r0, r3
 8003db2:	bf1c      	itt	ne
 8003db4:	1a1b      	subne	r3, r3, r0
 8003db6:	50a3      	strne	r3, [r4, r2]
 8003db8:	e7af      	b.n	8003d1a <_malloc_r+0x22>
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	bf0c      	ite	eq
 8003dc0:	f8c8 2000 	streq.w	r2, [r8]
 8003dc4:	605a      	strne	r2, [r3, #4]
 8003dc6:	e7eb      	b.n	8003da0 <_malloc_r+0xa8>
 8003dc8:	4623      	mov	r3, r4
 8003dca:	6864      	ldr	r4, [r4, #4]
 8003dcc:	e7ae      	b.n	8003d2c <_malloc_r+0x34>
 8003dce:	463c      	mov	r4, r7
 8003dd0:	687f      	ldr	r7, [r7, #4]
 8003dd2:	e7b6      	b.n	8003d42 <_malloc_r+0x4a>
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d1fb      	bne.n	8003dd4 <_malloc_r+0xdc>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6053      	str	r3, [r2, #4]
 8003de0:	e7de      	b.n	8003da0 <_malloc_r+0xa8>
 8003de2:	230c      	movs	r3, #12
 8003de4:	4630      	mov	r0, r6
 8003de6:	6033      	str	r3, [r6, #0]
 8003de8:	f000 f80c 	bl	8003e04 <__malloc_unlock>
 8003dec:	e794      	b.n	8003d18 <_malloc_r+0x20>
 8003dee:	6005      	str	r5, [r0, #0]
 8003df0:	e7d6      	b.n	8003da0 <_malloc_r+0xa8>
 8003df2:	bf00      	nop
 8003df4:	200006d0 	.word	0x200006d0

08003df8 <__malloc_lock>:
 8003df8:	4801      	ldr	r0, [pc, #4]	@ (8003e00 <__malloc_lock+0x8>)
 8003dfa:	f7ff beea 	b.w	8003bd2 <__retarget_lock_acquire_recursive>
 8003dfe:	bf00      	nop
 8003e00:	200006c8 	.word	0x200006c8

08003e04 <__malloc_unlock>:
 8003e04:	4801      	ldr	r0, [pc, #4]	@ (8003e0c <__malloc_unlock+0x8>)
 8003e06:	f7ff bee5 	b.w	8003bd4 <__retarget_lock_release_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	200006c8 	.word	0x200006c8

08003e10 <__sflush_r>:
 8003e10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	0716      	lsls	r6, r2, #28
 8003e18:	4605      	mov	r5, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	d454      	bmi.n	8003ec8 <__sflush_r+0xb8>
 8003e1e:	684b      	ldr	r3, [r1, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dc02      	bgt.n	8003e2a <__sflush_r+0x1a>
 8003e24:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	dd48      	ble.n	8003ebc <__sflush_r+0xac>
 8003e2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e2c:	2e00      	cmp	r6, #0
 8003e2e:	d045      	beq.n	8003ebc <__sflush_r+0xac>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e36:	682f      	ldr	r7, [r5, #0]
 8003e38:	6a21      	ldr	r1, [r4, #32]
 8003e3a:	602b      	str	r3, [r5, #0]
 8003e3c:	d030      	beq.n	8003ea0 <__sflush_r+0x90>
 8003e3e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	0759      	lsls	r1, r3, #29
 8003e44:	d505      	bpl.n	8003e52 <__sflush_r+0x42>
 8003e46:	6863      	ldr	r3, [r4, #4]
 8003e48:	1ad2      	subs	r2, r2, r3
 8003e4a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e4c:	b10b      	cbz	r3, 8003e52 <__sflush_r+0x42>
 8003e4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e50:	1ad2      	subs	r2, r2, r3
 8003e52:	2300      	movs	r3, #0
 8003e54:	4628      	mov	r0, r5
 8003e56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e58:	6a21      	ldr	r1, [r4, #32]
 8003e5a:	47b0      	blx	r6
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	89a3      	ldrh	r3, [r4, #12]
 8003e60:	d106      	bne.n	8003e70 <__sflush_r+0x60>
 8003e62:	6829      	ldr	r1, [r5, #0]
 8003e64:	291d      	cmp	r1, #29
 8003e66:	d82b      	bhi.n	8003ec0 <__sflush_r+0xb0>
 8003e68:	4a28      	ldr	r2, [pc, #160]	@ (8003f0c <__sflush_r+0xfc>)
 8003e6a:	410a      	asrs	r2, r1
 8003e6c:	07d6      	lsls	r6, r2, #31
 8003e6e:	d427      	bmi.n	8003ec0 <__sflush_r+0xb0>
 8003e70:	2200      	movs	r2, #0
 8003e72:	6062      	str	r2, [r4, #4]
 8003e74:	6922      	ldr	r2, [r4, #16]
 8003e76:	04d9      	lsls	r1, r3, #19
 8003e78:	6022      	str	r2, [r4, #0]
 8003e7a:	d504      	bpl.n	8003e86 <__sflush_r+0x76>
 8003e7c:	1c42      	adds	r2, r0, #1
 8003e7e:	d101      	bne.n	8003e84 <__sflush_r+0x74>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	b903      	cbnz	r3, 8003e86 <__sflush_r+0x76>
 8003e84:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e88:	602f      	str	r7, [r5, #0]
 8003e8a:	b1b9      	cbz	r1, 8003ebc <__sflush_r+0xac>
 8003e8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e90:	4299      	cmp	r1, r3
 8003e92:	d002      	beq.n	8003e9a <__sflush_r+0x8a>
 8003e94:	4628      	mov	r0, r5
 8003e96:	f7ff febd 	bl	8003c14 <_free_r>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e9e:	e00d      	b.n	8003ebc <__sflush_r+0xac>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	47b0      	blx	r6
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	1c50      	adds	r0, r2, #1
 8003eaa:	d1c9      	bne.n	8003e40 <__sflush_r+0x30>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0c6      	beq.n	8003e40 <__sflush_r+0x30>
 8003eb2:	2b1d      	cmp	r3, #29
 8003eb4:	d001      	beq.n	8003eba <__sflush_r+0xaa>
 8003eb6:	2b16      	cmp	r3, #22
 8003eb8:	d11d      	bne.n	8003ef6 <__sflush_r+0xe6>
 8003eba:	602f      	str	r7, [r5, #0]
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	e021      	b.n	8003f04 <__sflush_r+0xf4>
 8003ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ec4:	b21b      	sxth	r3, r3
 8003ec6:	e01a      	b.n	8003efe <__sflush_r+0xee>
 8003ec8:	690f      	ldr	r7, [r1, #16]
 8003eca:	2f00      	cmp	r7, #0
 8003ecc:	d0f6      	beq.n	8003ebc <__sflush_r+0xac>
 8003ece:	0793      	lsls	r3, r2, #30
 8003ed0:	bf18      	it	ne
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	680e      	ldr	r6, [r1, #0]
 8003ed6:	bf08      	it	eq
 8003ed8:	694b      	ldreq	r3, [r1, #20]
 8003eda:	1bf6      	subs	r6, r6, r7
 8003edc:	600f      	str	r7, [r1, #0]
 8003ede:	608b      	str	r3, [r1, #8]
 8003ee0:	2e00      	cmp	r6, #0
 8003ee2:	ddeb      	ble.n	8003ebc <__sflush_r+0xac>
 8003ee4:	4633      	mov	r3, r6
 8003ee6:	463a      	mov	r2, r7
 8003ee8:	4628      	mov	r0, r5
 8003eea:	6a21      	ldr	r1, [r4, #32]
 8003eec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003ef0:	47e0      	blx	ip
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	dc07      	bgt.n	8003f06 <__sflush_r+0xf6>
 8003ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003efe:	f04f 30ff 	mov.w	r0, #4294967295
 8003f02:	81a3      	strh	r3, [r4, #12]
 8003f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f06:	4407      	add	r7, r0
 8003f08:	1a36      	subs	r6, r6, r0
 8003f0a:	e7e9      	b.n	8003ee0 <__sflush_r+0xd0>
 8003f0c:	dfbffffe 	.word	0xdfbffffe

08003f10 <_fflush_r>:
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	690b      	ldr	r3, [r1, #16]
 8003f14:	4605      	mov	r5, r0
 8003f16:	460c      	mov	r4, r1
 8003f18:	b913      	cbnz	r3, 8003f20 <_fflush_r+0x10>
 8003f1a:	2500      	movs	r5, #0
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	b118      	cbz	r0, 8003f2a <_fflush_r+0x1a>
 8003f22:	6a03      	ldr	r3, [r0, #32]
 8003f24:	b90b      	cbnz	r3, 8003f2a <_fflush_r+0x1a>
 8003f26:	f7ff fd61 	bl	80039ec <__sinit>
 8003f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f3      	beq.n	8003f1a <_fflush_r+0xa>
 8003f32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f34:	07d0      	lsls	r0, r2, #31
 8003f36:	d404      	bmi.n	8003f42 <_fflush_r+0x32>
 8003f38:	0599      	lsls	r1, r3, #22
 8003f3a:	d402      	bmi.n	8003f42 <_fflush_r+0x32>
 8003f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f3e:	f7ff fe48 	bl	8003bd2 <__retarget_lock_acquire_recursive>
 8003f42:	4628      	mov	r0, r5
 8003f44:	4621      	mov	r1, r4
 8003f46:	f7ff ff63 	bl	8003e10 <__sflush_r>
 8003f4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f4c:	4605      	mov	r5, r0
 8003f4e:	07da      	lsls	r2, r3, #31
 8003f50:	d4e4      	bmi.n	8003f1c <_fflush_r+0xc>
 8003f52:	89a3      	ldrh	r3, [r4, #12]
 8003f54:	059b      	lsls	r3, r3, #22
 8003f56:	d4e1      	bmi.n	8003f1c <_fflush_r+0xc>
 8003f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f5a:	f7ff fe3b 	bl	8003bd4 <__retarget_lock_release_recursive>
 8003f5e:	e7dd      	b.n	8003f1c <_fflush_r+0xc>

08003f60 <fiprintf>:
 8003f60:	b40e      	push	{r1, r2, r3}
 8003f62:	b503      	push	{r0, r1, lr}
 8003f64:	4601      	mov	r1, r0
 8003f66:	ab03      	add	r3, sp, #12
 8003f68:	4805      	ldr	r0, [pc, #20]	@ (8003f80 <fiprintf+0x20>)
 8003f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f6e:	6800      	ldr	r0, [r0, #0]
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	f000 f845 	bl	8004000 <_vfiprintf_r>
 8003f76:	b002      	add	sp, #8
 8003f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f7c:	b003      	add	sp, #12
 8003f7e:	4770      	bx	lr
 8003f80:	200000b8 	.word	0x200000b8

08003f84 <_sbrk_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	2300      	movs	r3, #0
 8003f88:	4d05      	ldr	r5, [pc, #20]	@ (8003fa0 <_sbrk_r+0x1c>)
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	f7fd ff06 	bl	8001da0 <_sbrk>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_sbrk_r+0x1a>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_sbrk_r+0x1a>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	200006c4 	.word	0x200006c4

08003fa4 <abort>:
 8003fa4:	2006      	movs	r0, #6
 8003fa6:	b508      	push	{r3, lr}
 8003fa8:	f000 fb90 	bl	80046cc <raise>
 8003fac:	2001      	movs	r0, #1
 8003fae:	f7fd fe82 	bl	8001cb6 <_exit>

08003fb2 <__sfputc_r>:
 8003fb2:	6893      	ldr	r3, [r2, #8]
 8003fb4:	b410      	push	{r4}
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	6093      	str	r3, [r2, #8]
 8003fbc:	da07      	bge.n	8003fce <__sfputc_r+0x1c>
 8003fbe:	6994      	ldr	r4, [r2, #24]
 8003fc0:	42a3      	cmp	r3, r4
 8003fc2:	db01      	blt.n	8003fc8 <__sfputc_r+0x16>
 8003fc4:	290a      	cmp	r1, #10
 8003fc6:	d102      	bne.n	8003fce <__sfputc_r+0x1c>
 8003fc8:	bc10      	pop	{r4}
 8003fca:	f000 bac3 	b.w	8004554 <__swbuf_r>
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	1c58      	adds	r0, r3, #1
 8003fd2:	6010      	str	r0, [r2, #0]
 8003fd4:	7019      	strb	r1, [r3, #0]
 8003fd6:	4608      	mov	r0, r1
 8003fd8:	bc10      	pop	{r4}
 8003fda:	4770      	bx	lr

08003fdc <__sfputs_r>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	4606      	mov	r6, r0
 8003fe0:	460f      	mov	r7, r1
 8003fe2:	4614      	mov	r4, r2
 8003fe4:	18d5      	adds	r5, r2, r3
 8003fe6:	42ac      	cmp	r4, r5
 8003fe8:	d101      	bne.n	8003fee <__sfputs_r+0x12>
 8003fea:	2000      	movs	r0, #0
 8003fec:	e007      	b.n	8003ffe <__sfputs_r+0x22>
 8003fee:	463a      	mov	r2, r7
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff6:	f7ff ffdc 	bl	8003fb2 <__sfputc_r>
 8003ffa:	1c43      	adds	r3, r0, #1
 8003ffc:	d1f3      	bne.n	8003fe6 <__sfputs_r+0xa>
 8003ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004000 <_vfiprintf_r>:
 8004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004004:	460d      	mov	r5, r1
 8004006:	4614      	mov	r4, r2
 8004008:	4698      	mov	r8, r3
 800400a:	4606      	mov	r6, r0
 800400c:	b09d      	sub	sp, #116	@ 0x74
 800400e:	b118      	cbz	r0, 8004018 <_vfiprintf_r+0x18>
 8004010:	6a03      	ldr	r3, [r0, #32]
 8004012:	b90b      	cbnz	r3, 8004018 <_vfiprintf_r+0x18>
 8004014:	f7ff fcea 	bl	80039ec <__sinit>
 8004018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800401a:	07d9      	lsls	r1, r3, #31
 800401c:	d405      	bmi.n	800402a <_vfiprintf_r+0x2a>
 800401e:	89ab      	ldrh	r3, [r5, #12]
 8004020:	059a      	lsls	r2, r3, #22
 8004022:	d402      	bmi.n	800402a <_vfiprintf_r+0x2a>
 8004024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004026:	f7ff fdd4 	bl	8003bd2 <__retarget_lock_acquire_recursive>
 800402a:	89ab      	ldrh	r3, [r5, #12]
 800402c:	071b      	lsls	r3, r3, #28
 800402e:	d501      	bpl.n	8004034 <_vfiprintf_r+0x34>
 8004030:	692b      	ldr	r3, [r5, #16]
 8004032:	b99b      	cbnz	r3, 800405c <_vfiprintf_r+0x5c>
 8004034:	4629      	mov	r1, r5
 8004036:	4630      	mov	r0, r6
 8004038:	f000 faca 	bl	80045d0 <__swsetup_r>
 800403c:	b170      	cbz	r0, 800405c <_vfiprintf_r+0x5c>
 800403e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004040:	07dc      	lsls	r4, r3, #31
 8004042:	d504      	bpl.n	800404e <_vfiprintf_r+0x4e>
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	b01d      	add	sp, #116	@ 0x74
 800404a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404e:	89ab      	ldrh	r3, [r5, #12]
 8004050:	0598      	lsls	r0, r3, #22
 8004052:	d4f7      	bmi.n	8004044 <_vfiprintf_r+0x44>
 8004054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004056:	f7ff fdbd 	bl	8003bd4 <__retarget_lock_release_recursive>
 800405a:	e7f3      	b.n	8004044 <_vfiprintf_r+0x44>
 800405c:	2300      	movs	r3, #0
 800405e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004060:	2320      	movs	r3, #32
 8004062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004066:	2330      	movs	r3, #48	@ 0x30
 8004068:	f04f 0901 	mov.w	r9, #1
 800406c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004070:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800421c <_vfiprintf_r+0x21c>
 8004074:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004078:	4623      	mov	r3, r4
 800407a:	469a      	mov	sl, r3
 800407c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004080:	b10a      	cbz	r2, 8004086 <_vfiprintf_r+0x86>
 8004082:	2a25      	cmp	r2, #37	@ 0x25
 8004084:	d1f9      	bne.n	800407a <_vfiprintf_r+0x7a>
 8004086:	ebba 0b04 	subs.w	fp, sl, r4
 800408a:	d00b      	beq.n	80040a4 <_vfiprintf_r+0xa4>
 800408c:	465b      	mov	r3, fp
 800408e:	4622      	mov	r2, r4
 8004090:	4629      	mov	r1, r5
 8004092:	4630      	mov	r0, r6
 8004094:	f7ff ffa2 	bl	8003fdc <__sfputs_r>
 8004098:	3001      	adds	r0, #1
 800409a:	f000 80a7 	beq.w	80041ec <_vfiprintf_r+0x1ec>
 800409e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040a0:	445a      	add	r2, fp
 80040a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80040a4:	f89a 3000 	ldrb.w	r3, [sl]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 809f 	beq.w	80041ec <_vfiprintf_r+0x1ec>
 80040ae:	2300      	movs	r3, #0
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295
 80040b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040b8:	f10a 0a01 	add.w	sl, sl, #1
 80040bc:	9304      	str	r3, [sp, #16]
 80040be:	9307      	str	r3, [sp, #28]
 80040c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80040c6:	4654      	mov	r4, sl
 80040c8:	2205      	movs	r2, #5
 80040ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ce:	4853      	ldr	r0, [pc, #332]	@ (800421c <_vfiprintf_r+0x21c>)
 80040d0:	f000 fb18 	bl	8004704 <memchr>
 80040d4:	9a04      	ldr	r2, [sp, #16]
 80040d6:	b9d8      	cbnz	r0, 8004110 <_vfiprintf_r+0x110>
 80040d8:	06d1      	lsls	r1, r2, #27
 80040da:	bf44      	itt	mi
 80040dc:	2320      	movmi	r3, #32
 80040de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040e2:	0713      	lsls	r3, r2, #28
 80040e4:	bf44      	itt	mi
 80040e6:	232b      	movmi	r3, #43	@ 0x2b
 80040e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ec:	f89a 3000 	ldrb.w	r3, [sl]
 80040f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80040f2:	d015      	beq.n	8004120 <_vfiprintf_r+0x120>
 80040f4:	4654      	mov	r4, sl
 80040f6:	2000      	movs	r0, #0
 80040f8:	f04f 0c0a 	mov.w	ip, #10
 80040fc:	9a07      	ldr	r2, [sp, #28]
 80040fe:	4621      	mov	r1, r4
 8004100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004104:	3b30      	subs	r3, #48	@ 0x30
 8004106:	2b09      	cmp	r3, #9
 8004108:	d94b      	bls.n	80041a2 <_vfiprintf_r+0x1a2>
 800410a:	b1b0      	cbz	r0, 800413a <_vfiprintf_r+0x13a>
 800410c:	9207      	str	r2, [sp, #28]
 800410e:	e014      	b.n	800413a <_vfiprintf_r+0x13a>
 8004110:	eba0 0308 	sub.w	r3, r0, r8
 8004114:	fa09 f303 	lsl.w	r3, r9, r3
 8004118:	4313      	orrs	r3, r2
 800411a:	46a2      	mov	sl, r4
 800411c:	9304      	str	r3, [sp, #16]
 800411e:	e7d2      	b.n	80040c6 <_vfiprintf_r+0xc6>
 8004120:	9b03      	ldr	r3, [sp, #12]
 8004122:	1d19      	adds	r1, r3, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	9103      	str	r1, [sp, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	bfbb      	ittet	lt
 800412c:	425b      	neglt	r3, r3
 800412e:	f042 0202 	orrlt.w	r2, r2, #2
 8004132:	9307      	strge	r3, [sp, #28]
 8004134:	9307      	strlt	r3, [sp, #28]
 8004136:	bfb8      	it	lt
 8004138:	9204      	strlt	r2, [sp, #16]
 800413a:	7823      	ldrb	r3, [r4, #0]
 800413c:	2b2e      	cmp	r3, #46	@ 0x2e
 800413e:	d10a      	bne.n	8004156 <_vfiprintf_r+0x156>
 8004140:	7863      	ldrb	r3, [r4, #1]
 8004142:	2b2a      	cmp	r3, #42	@ 0x2a
 8004144:	d132      	bne.n	80041ac <_vfiprintf_r+0x1ac>
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	3402      	adds	r4, #2
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	9203      	str	r2, [sp, #12]
 8004150:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004154:	9305      	str	r3, [sp, #20]
 8004156:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004220 <_vfiprintf_r+0x220>
 800415a:	2203      	movs	r2, #3
 800415c:	4650      	mov	r0, sl
 800415e:	7821      	ldrb	r1, [r4, #0]
 8004160:	f000 fad0 	bl	8004704 <memchr>
 8004164:	b138      	cbz	r0, 8004176 <_vfiprintf_r+0x176>
 8004166:	2240      	movs	r2, #64	@ 0x40
 8004168:	9b04      	ldr	r3, [sp, #16]
 800416a:	eba0 000a 	sub.w	r0, r0, sl
 800416e:	4082      	lsls	r2, r0
 8004170:	4313      	orrs	r3, r2
 8004172:	3401      	adds	r4, #1
 8004174:	9304      	str	r3, [sp, #16]
 8004176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800417a:	2206      	movs	r2, #6
 800417c:	4829      	ldr	r0, [pc, #164]	@ (8004224 <_vfiprintf_r+0x224>)
 800417e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004182:	f000 fabf 	bl	8004704 <memchr>
 8004186:	2800      	cmp	r0, #0
 8004188:	d03f      	beq.n	800420a <_vfiprintf_r+0x20a>
 800418a:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <_vfiprintf_r+0x228>)
 800418c:	bb1b      	cbnz	r3, 80041d6 <_vfiprintf_r+0x1d6>
 800418e:	9b03      	ldr	r3, [sp, #12]
 8004190:	3307      	adds	r3, #7
 8004192:	f023 0307 	bic.w	r3, r3, #7
 8004196:	3308      	adds	r3, #8
 8004198:	9303      	str	r3, [sp, #12]
 800419a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800419c:	443b      	add	r3, r7
 800419e:	9309      	str	r3, [sp, #36]	@ 0x24
 80041a0:	e76a      	b.n	8004078 <_vfiprintf_r+0x78>
 80041a2:	460c      	mov	r4, r1
 80041a4:	2001      	movs	r0, #1
 80041a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80041aa:	e7a8      	b.n	80040fe <_vfiprintf_r+0xfe>
 80041ac:	2300      	movs	r3, #0
 80041ae:	f04f 0c0a 	mov.w	ip, #10
 80041b2:	4619      	mov	r1, r3
 80041b4:	3401      	adds	r4, #1
 80041b6:	9305      	str	r3, [sp, #20]
 80041b8:	4620      	mov	r0, r4
 80041ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041be:	3a30      	subs	r2, #48	@ 0x30
 80041c0:	2a09      	cmp	r2, #9
 80041c2:	d903      	bls.n	80041cc <_vfiprintf_r+0x1cc>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0c6      	beq.n	8004156 <_vfiprintf_r+0x156>
 80041c8:	9105      	str	r1, [sp, #20]
 80041ca:	e7c4      	b.n	8004156 <_vfiprintf_r+0x156>
 80041cc:	4604      	mov	r4, r0
 80041ce:	2301      	movs	r3, #1
 80041d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80041d4:	e7f0      	b.n	80041b8 <_vfiprintf_r+0x1b8>
 80041d6:	ab03      	add	r3, sp, #12
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	462a      	mov	r2, r5
 80041dc:	4630      	mov	r0, r6
 80041de:	4b13      	ldr	r3, [pc, #76]	@ (800422c <_vfiprintf_r+0x22c>)
 80041e0:	a904      	add	r1, sp, #16
 80041e2:	f3af 8000 	nop.w
 80041e6:	4607      	mov	r7, r0
 80041e8:	1c78      	adds	r0, r7, #1
 80041ea:	d1d6      	bne.n	800419a <_vfiprintf_r+0x19a>
 80041ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041ee:	07d9      	lsls	r1, r3, #31
 80041f0:	d405      	bmi.n	80041fe <_vfiprintf_r+0x1fe>
 80041f2:	89ab      	ldrh	r3, [r5, #12]
 80041f4:	059a      	lsls	r2, r3, #22
 80041f6:	d402      	bmi.n	80041fe <_vfiprintf_r+0x1fe>
 80041f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041fa:	f7ff fceb 	bl	8003bd4 <__retarget_lock_release_recursive>
 80041fe:	89ab      	ldrh	r3, [r5, #12]
 8004200:	065b      	lsls	r3, r3, #25
 8004202:	f53f af1f 	bmi.w	8004044 <_vfiprintf_r+0x44>
 8004206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004208:	e71e      	b.n	8004048 <_vfiprintf_r+0x48>
 800420a:	ab03      	add	r3, sp, #12
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	462a      	mov	r2, r5
 8004210:	4630      	mov	r0, r6
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <_vfiprintf_r+0x22c>)
 8004214:	a904      	add	r1, sp, #16
 8004216:	f000 f87d 	bl	8004314 <_printf_i>
 800421a:	e7e4      	b.n	80041e6 <_vfiprintf_r+0x1e6>
 800421c:	08004941 	.word	0x08004941
 8004220:	08004947 	.word	0x08004947
 8004224:	0800494b 	.word	0x0800494b
 8004228:	00000000 	.word	0x00000000
 800422c:	08003fdd 	.word	0x08003fdd

08004230 <_printf_common>:
 8004230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004234:	4616      	mov	r6, r2
 8004236:	4698      	mov	r8, r3
 8004238:	688a      	ldr	r2, [r1, #8]
 800423a:	690b      	ldr	r3, [r1, #16]
 800423c:	4607      	mov	r7, r0
 800423e:	4293      	cmp	r3, r2
 8004240:	bfb8      	it	lt
 8004242:	4613      	movlt	r3, r2
 8004244:	6033      	str	r3, [r6, #0]
 8004246:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800424a:	460c      	mov	r4, r1
 800424c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004250:	b10a      	cbz	r2, 8004256 <_printf_common+0x26>
 8004252:	3301      	adds	r3, #1
 8004254:	6033      	str	r3, [r6, #0]
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	0699      	lsls	r1, r3, #26
 800425a:	bf42      	ittt	mi
 800425c:	6833      	ldrmi	r3, [r6, #0]
 800425e:	3302      	addmi	r3, #2
 8004260:	6033      	strmi	r3, [r6, #0]
 8004262:	6825      	ldr	r5, [r4, #0]
 8004264:	f015 0506 	ands.w	r5, r5, #6
 8004268:	d106      	bne.n	8004278 <_printf_common+0x48>
 800426a:	f104 0a19 	add.w	sl, r4, #25
 800426e:	68e3      	ldr	r3, [r4, #12]
 8004270:	6832      	ldr	r2, [r6, #0]
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	42ab      	cmp	r3, r5
 8004276:	dc2b      	bgt.n	80042d0 <_printf_common+0xa0>
 8004278:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	3b00      	subs	r3, #0
 8004280:	bf18      	it	ne
 8004282:	2301      	movne	r3, #1
 8004284:	0692      	lsls	r2, r2, #26
 8004286:	d430      	bmi.n	80042ea <_printf_common+0xba>
 8004288:	4641      	mov	r1, r8
 800428a:	4638      	mov	r0, r7
 800428c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004290:	47c8      	blx	r9
 8004292:	3001      	adds	r0, #1
 8004294:	d023      	beq.n	80042de <_printf_common+0xae>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	6922      	ldr	r2, [r4, #16]
 800429a:	f003 0306 	and.w	r3, r3, #6
 800429e:	2b04      	cmp	r3, #4
 80042a0:	bf14      	ite	ne
 80042a2:	2500      	movne	r5, #0
 80042a4:	6833      	ldreq	r3, [r6, #0]
 80042a6:	f04f 0600 	mov.w	r6, #0
 80042aa:	bf08      	it	eq
 80042ac:	68e5      	ldreq	r5, [r4, #12]
 80042ae:	f104 041a 	add.w	r4, r4, #26
 80042b2:	bf08      	it	eq
 80042b4:	1aed      	subeq	r5, r5, r3
 80042b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042ba:	bf08      	it	eq
 80042bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042c0:	4293      	cmp	r3, r2
 80042c2:	bfc4      	itt	gt
 80042c4:	1a9b      	subgt	r3, r3, r2
 80042c6:	18ed      	addgt	r5, r5, r3
 80042c8:	42b5      	cmp	r5, r6
 80042ca:	d11a      	bne.n	8004302 <_printf_common+0xd2>
 80042cc:	2000      	movs	r0, #0
 80042ce:	e008      	b.n	80042e2 <_printf_common+0xb2>
 80042d0:	2301      	movs	r3, #1
 80042d2:	4652      	mov	r2, sl
 80042d4:	4641      	mov	r1, r8
 80042d6:	4638      	mov	r0, r7
 80042d8:	47c8      	blx	r9
 80042da:	3001      	adds	r0, #1
 80042dc:	d103      	bne.n	80042e6 <_printf_common+0xb6>
 80042de:	f04f 30ff 	mov.w	r0, #4294967295
 80042e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e6:	3501      	adds	r5, #1
 80042e8:	e7c1      	b.n	800426e <_printf_common+0x3e>
 80042ea:	2030      	movs	r0, #48	@ 0x30
 80042ec:	18e1      	adds	r1, r4, r3
 80042ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042f8:	4422      	add	r2, r4
 80042fa:	3302      	adds	r3, #2
 80042fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004300:	e7c2      	b.n	8004288 <_printf_common+0x58>
 8004302:	2301      	movs	r3, #1
 8004304:	4622      	mov	r2, r4
 8004306:	4641      	mov	r1, r8
 8004308:	4638      	mov	r0, r7
 800430a:	47c8      	blx	r9
 800430c:	3001      	adds	r0, #1
 800430e:	d0e6      	beq.n	80042de <_printf_common+0xae>
 8004310:	3601      	adds	r6, #1
 8004312:	e7d9      	b.n	80042c8 <_printf_common+0x98>

08004314 <_printf_i>:
 8004314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004318:	7e0f      	ldrb	r7, [r1, #24]
 800431a:	4691      	mov	r9, r2
 800431c:	2f78      	cmp	r7, #120	@ 0x78
 800431e:	4680      	mov	r8, r0
 8004320:	460c      	mov	r4, r1
 8004322:	469a      	mov	sl, r3
 8004324:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004326:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800432a:	d807      	bhi.n	800433c <_printf_i+0x28>
 800432c:	2f62      	cmp	r7, #98	@ 0x62
 800432e:	d80a      	bhi.n	8004346 <_printf_i+0x32>
 8004330:	2f00      	cmp	r7, #0
 8004332:	f000 80d3 	beq.w	80044dc <_printf_i+0x1c8>
 8004336:	2f58      	cmp	r7, #88	@ 0x58
 8004338:	f000 80ba 	beq.w	80044b0 <_printf_i+0x19c>
 800433c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004340:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004344:	e03a      	b.n	80043bc <_printf_i+0xa8>
 8004346:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800434a:	2b15      	cmp	r3, #21
 800434c:	d8f6      	bhi.n	800433c <_printf_i+0x28>
 800434e:	a101      	add	r1, pc, #4	@ (adr r1, 8004354 <_printf_i+0x40>)
 8004350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004354:	080043ad 	.word	0x080043ad
 8004358:	080043c1 	.word	0x080043c1
 800435c:	0800433d 	.word	0x0800433d
 8004360:	0800433d 	.word	0x0800433d
 8004364:	0800433d 	.word	0x0800433d
 8004368:	0800433d 	.word	0x0800433d
 800436c:	080043c1 	.word	0x080043c1
 8004370:	0800433d 	.word	0x0800433d
 8004374:	0800433d 	.word	0x0800433d
 8004378:	0800433d 	.word	0x0800433d
 800437c:	0800433d 	.word	0x0800433d
 8004380:	080044c3 	.word	0x080044c3
 8004384:	080043eb 	.word	0x080043eb
 8004388:	0800447d 	.word	0x0800447d
 800438c:	0800433d 	.word	0x0800433d
 8004390:	0800433d 	.word	0x0800433d
 8004394:	080044e5 	.word	0x080044e5
 8004398:	0800433d 	.word	0x0800433d
 800439c:	080043eb 	.word	0x080043eb
 80043a0:	0800433d 	.word	0x0800433d
 80043a4:	0800433d 	.word	0x0800433d
 80043a8:	08004485 	.word	0x08004485
 80043ac:	6833      	ldr	r3, [r6, #0]
 80043ae:	1d1a      	adds	r2, r3, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6032      	str	r2, [r6, #0]
 80043b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043bc:	2301      	movs	r3, #1
 80043be:	e09e      	b.n	80044fe <_printf_i+0x1ea>
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	1d19      	adds	r1, r3, #4
 80043c6:	6031      	str	r1, [r6, #0]
 80043c8:	0606      	lsls	r6, r0, #24
 80043ca:	d501      	bpl.n	80043d0 <_printf_i+0xbc>
 80043cc:	681d      	ldr	r5, [r3, #0]
 80043ce:	e003      	b.n	80043d8 <_printf_i+0xc4>
 80043d0:	0645      	lsls	r5, r0, #25
 80043d2:	d5fb      	bpl.n	80043cc <_printf_i+0xb8>
 80043d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043d8:	2d00      	cmp	r5, #0
 80043da:	da03      	bge.n	80043e4 <_printf_i+0xd0>
 80043dc:	232d      	movs	r3, #45	@ 0x2d
 80043de:	426d      	negs	r5, r5
 80043e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043e4:	230a      	movs	r3, #10
 80043e6:	4859      	ldr	r0, [pc, #356]	@ (800454c <_printf_i+0x238>)
 80043e8:	e011      	b.n	800440e <_printf_i+0xfa>
 80043ea:	6821      	ldr	r1, [r4, #0]
 80043ec:	6833      	ldr	r3, [r6, #0]
 80043ee:	0608      	lsls	r0, r1, #24
 80043f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80043f4:	d402      	bmi.n	80043fc <_printf_i+0xe8>
 80043f6:	0649      	lsls	r1, r1, #25
 80043f8:	bf48      	it	mi
 80043fa:	b2ad      	uxthmi	r5, r5
 80043fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80043fe:	6033      	str	r3, [r6, #0]
 8004400:	bf14      	ite	ne
 8004402:	230a      	movne	r3, #10
 8004404:	2308      	moveq	r3, #8
 8004406:	4851      	ldr	r0, [pc, #324]	@ (800454c <_printf_i+0x238>)
 8004408:	2100      	movs	r1, #0
 800440a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800440e:	6866      	ldr	r6, [r4, #4]
 8004410:	2e00      	cmp	r6, #0
 8004412:	bfa8      	it	ge
 8004414:	6821      	ldrge	r1, [r4, #0]
 8004416:	60a6      	str	r6, [r4, #8]
 8004418:	bfa4      	itt	ge
 800441a:	f021 0104 	bicge.w	r1, r1, #4
 800441e:	6021      	strge	r1, [r4, #0]
 8004420:	b90d      	cbnz	r5, 8004426 <_printf_i+0x112>
 8004422:	2e00      	cmp	r6, #0
 8004424:	d04b      	beq.n	80044be <_printf_i+0x1aa>
 8004426:	4616      	mov	r6, r2
 8004428:	fbb5 f1f3 	udiv	r1, r5, r3
 800442c:	fb03 5711 	mls	r7, r3, r1, r5
 8004430:	5dc7      	ldrb	r7, [r0, r7]
 8004432:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004436:	462f      	mov	r7, r5
 8004438:	42bb      	cmp	r3, r7
 800443a:	460d      	mov	r5, r1
 800443c:	d9f4      	bls.n	8004428 <_printf_i+0x114>
 800443e:	2b08      	cmp	r3, #8
 8004440:	d10b      	bne.n	800445a <_printf_i+0x146>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	07df      	lsls	r7, r3, #31
 8004446:	d508      	bpl.n	800445a <_printf_i+0x146>
 8004448:	6923      	ldr	r3, [r4, #16]
 800444a:	6861      	ldr	r1, [r4, #4]
 800444c:	4299      	cmp	r1, r3
 800444e:	bfde      	ittt	le
 8004450:	2330      	movle	r3, #48	@ 0x30
 8004452:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004456:	f106 36ff 	addle.w	r6, r6, #4294967295
 800445a:	1b92      	subs	r2, r2, r6
 800445c:	6122      	str	r2, [r4, #16]
 800445e:	464b      	mov	r3, r9
 8004460:	4621      	mov	r1, r4
 8004462:	4640      	mov	r0, r8
 8004464:	f8cd a000 	str.w	sl, [sp]
 8004468:	aa03      	add	r2, sp, #12
 800446a:	f7ff fee1 	bl	8004230 <_printf_common>
 800446e:	3001      	adds	r0, #1
 8004470:	d14a      	bne.n	8004508 <_printf_i+0x1f4>
 8004472:	f04f 30ff 	mov.w	r0, #4294967295
 8004476:	b004      	add	sp, #16
 8004478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	f043 0320 	orr.w	r3, r3, #32
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	2778      	movs	r7, #120	@ 0x78
 8004486:	4832      	ldr	r0, [pc, #200]	@ (8004550 <_printf_i+0x23c>)
 8004488:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	6831      	ldr	r1, [r6, #0]
 8004490:	061f      	lsls	r7, r3, #24
 8004492:	f851 5b04 	ldr.w	r5, [r1], #4
 8004496:	d402      	bmi.n	800449e <_printf_i+0x18a>
 8004498:	065f      	lsls	r7, r3, #25
 800449a:	bf48      	it	mi
 800449c:	b2ad      	uxthmi	r5, r5
 800449e:	6031      	str	r1, [r6, #0]
 80044a0:	07d9      	lsls	r1, r3, #31
 80044a2:	bf44      	itt	mi
 80044a4:	f043 0320 	orrmi.w	r3, r3, #32
 80044a8:	6023      	strmi	r3, [r4, #0]
 80044aa:	b11d      	cbz	r5, 80044b4 <_printf_i+0x1a0>
 80044ac:	2310      	movs	r3, #16
 80044ae:	e7ab      	b.n	8004408 <_printf_i+0xf4>
 80044b0:	4826      	ldr	r0, [pc, #152]	@ (800454c <_printf_i+0x238>)
 80044b2:	e7e9      	b.n	8004488 <_printf_i+0x174>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	f023 0320 	bic.w	r3, r3, #32
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	e7f6      	b.n	80044ac <_printf_i+0x198>
 80044be:	4616      	mov	r6, r2
 80044c0:	e7bd      	b.n	800443e <_printf_i+0x12a>
 80044c2:	6833      	ldr	r3, [r6, #0]
 80044c4:	6825      	ldr	r5, [r4, #0]
 80044c6:	1d18      	adds	r0, r3, #4
 80044c8:	6961      	ldr	r1, [r4, #20]
 80044ca:	6030      	str	r0, [r6, #0]
 80044cc:	062e      	lsls	r6, r5, #24
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	d501      	bpl.n	80044d6 <_printf_i+0x1c2>
 80044d2:	6019      	str	r1, [r3, #0]
 80044d4:	e002      	b.n	80044dc <_printf_i+0x1c8>
 80044d6:	0668      	lsls	r0, r5, #25
 80044d8:	d5fb      	bpl.n	80044d2 <_printf_i+0x1be>
 80044da:	8019      	strh	r1, [r3, #0]
 80044dc:	2300      	movs	r3, #0
 80044de:	4616      	mov	r6, r2
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	e7bc      	b.n	800445e <_printf_i+0x14a>
 80044e4:	6833      	ldr	r3, [r6, #0]
 80044e6:	2100      	movs	r1, #0
 80044e8:	1d1a      	adds	r2, r3, #4
 80044ea:	6032      	str	r2, [r6, #0]
 80044ec:	681e      	ldr	r6, [r3, #0]
 80044ee:	6862      	ldr	r2, [r4, #4]
 80044f0:	4630      	mov	r0, r6
 80044f2:	f000 f907 	bl	8004704 <memchr>
 80044f6:	b108      	cbz	r0, 80044fc <_printf_i+0x1e8>
 80044f8:	1b80      	subs	r0, r0, r6
 80044fa:	6060      	str	r0, [r4, #4]
 80044fc:	6863      	ldr	r3, [r4, #4]
 80044fe:	6123      	str	r3, [r4, #16]
 8004500:	2300      	movs	r3, #0
 8004502:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004506:	e7aa      	b.n	800445e <_printf_i+0x14a>
 8004508:	4632      	mov	r2, r6
 800450a:	4649      	mov	r1, r9
 800450c:	4640      	mov	r0, r8
 800450e:	6923      	ldr	r3, [r4, #16]
 8004510:	47d0      	blx	sl
 8004512:	3001      	adds	r0, #1
 8004514:	d0ad      	beq.n	8004472 <_printf_i+0x15e>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	079b      	lsls	r3, r3, #30
 800451a:	d413      	bmi.n	8004544 <_printf_i+0x230>
 800451c:	68e0      	ldr	r0, [r4, #12]
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	4298      	cmp	r0, r3
 8004522:	bfb8      	it	lt
 8004524:	4618      	movlt	r0, r3
 8004526:	e7a6      	b.n	8004476 <_printf_i+0x162>
 8004528:	2301      	movs	r3, #1
 800452a:	4632      	mov	r2, r6
 800452c:	4649      	mov	r1, r9
 800452e:	4640      	mov	r0, r8
 8004530:	47d0      	blx	sl
 8004532:	3001      	adds	r0, #1
 8004534:	d09d      	beq.n	8004472 <_printf_i+0x15e>
 8004536:	3501      	adds	r5, #1
 8004538:	68e3      	ldr	r3, [r4, #12]
 800453a:	9903      	ldr	r1, [sp, #12]
 800453c:	1a5b      	subs	r3, r3, r1
 800453e:	42ab      	cmp	r3, r5
 8004540:	dcf2      	bgt.n	8004528 <_printf_i+0x214>
 8004542:	e7eb      	b.n	800451c <_printf_i+0x208>
 8004544:	2500      	movs	r5, #0
 8004546:	f104 0619 	add.w	r6, r4, #25
 800454a:	e7f5      	b.n	8004538 <_printf_i+0x224>
 800454c:	08004952 	.word	0x08004952
 8004550:	08004963 	.word	0x08004963

08004554 <__swbuf_r>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	460e      	mov	r6, r1
 8004558:	4614      	mov	r4, r2
 800455a:	4605      	mov	r5, r0
 800455c:	b118      	cbz	r0, 8004566 <__swbuf_r+0x12>
 800455e:	6a03      	ldr	r3, [r0, #32]
 8004560:	b90b      	cbnz	r3, 8004566 <__swbuf_r+0x12>
 8004562:	f7ff fa43 	bl	80039ec <__sinit>
 8004566:	69a3      	ldr	r3, [r4, #24]
 8004568:	60a3      	str	r3, [r4, #8]
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	071a      	lsls	r2, r3, #28
 800456e:	d501      	bpl.n	8004574 <__swbuf_r+0x20>
 8004570:	6923      	ldr	r3, [r4, #16]
 8004572:	b943      	cbnz	r3, 8004586 <__swbuf_r+0x32>
 8004574:	4621      	mov	r1, r4
 8004576:	4628      	mov	r0, r5
 8004578:	f000 f82a 	bl	80045d0 <__swsetup_r>
 800457c:	b118      	cbz	r0, 8004586 <__swbuf_r+0x32>
 800457e:	f04f 37ff 	mov.w	r7, #4294967295
 8004582:	4638      	mov	r0, r7
 8004584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	6922      	ldr	r2, [r4, #16]
 800458a:	b2f6      	uxtb	r6, r6
 800458c:	1a98      	subs	r0, r3, r2
 800458e:	6963      	ldr	r3, [r4, #20]
 8004590:	4637      	mov	r7, r6
 8004592:	4283      	cmp	r3, r0
 8004594:	dc05      	bgt.n	80045a2 <__swbuf_r+0x4e>
 8004596:	4621      	mov	r1, r4
 8004598:	4628      	mov	r0, r5
 800459a:	f7ff fcb9 	bl	8003f10 <_fflush_r>
 800459e:	2800      	cmp	r0, #0
 80045a0:	d1ed      	bne.n	800457e <__swbuf_r+0x2a>
 80045a2:	68a3      	ldr	r3, [r4, #8]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	60a3      	str	r3, [r4, #8]
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	701e      	strb	r6, [r3, #0]
 80045b0:	6962      	ldr	r2, [r4, #20]
 80045b2:	1c43      	adds	r3, r0, #1
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d004      	beq.n	80045c2 <__swbuf_r+0x6e>
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	07db      	lsls	r3, r3, #31
 80045bc:	d5e1      	bpl.n	8004582 <__swbuf_r+0x2e>
 80045be:	2e0a      	cmp	r6, #10
 80045c0:	d1df      	bne.n	8004582 <__swbuf_r+0x2e>
 80045c2:	4621      	mov	r1, r4
 80045c4:	4628      	mov	r0, r5
 80045c6:	f7ff fca3 	bl	8003f10 <_fflush_r>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d0d9      	beq.n	8004582 <__swbuf_r+0x2e>
 80045ce:	e7d6      	b.n	800457e <__swbuf_r+0x2a>

080045d0 <__swsetup_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4b29      	ldr	r3, [pc, #164]	@ (8004678 <__swsetup_r+0xa8>)
 80045d4:	4605      	mov	r5, r0
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	460c      	mov	r4, r1
 80045da:	b118      	cbz	r0, 80045e4 <__swsetup_r+0x14>
 80045dc:	6a03      	ldr	r3, [r0, #32]
 80045de:	b90b      	cbnz	r3, 80045e4 <__swsetup_r+0x14>
 80045e0:	f7ff fa04 	bl	80039ec <__sinit>
 80045e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e8:	0719      	lsls	r1, r3, #28
 80045ea:	d422      	bmi.n	8004632 <__swsetup_r+0x62>
 80045ec:	06da      	lsls	r2, r3, #27
 80045ee:	d407      	bmi.n	8004600 <__swsetup_r+0x30>
 80045f0:	2209      	movs	r2, #9
 80045f2:	602a      	str	r2, [r5, #0]
 80045f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	e033      	b.n	8004668 <__swsetup_r+0x98>
 8004600:	0758      	lsls	r0, r3, #29
 8004602:	d512      	bpl.n	800462a <__swsetup_r+0x5a>
 8004604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004606:	b141      	cbz	r1, 800461a <__swsetup_r+0x4a>
 8004608:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800460c:	4299      	cmp	r1, r3
 800460e:	d002      	beq.n	8004616 <__swsetup_r+0x46>
 8004610:	4628      	mov	r0, r5
 8004612:	f7ff faff 	bl	8003c14 <_free_r>
 8004616:	2300      	movs	r3, #0
 8004618:	6363      	str	r3, [r4, #52]	@ 0x34
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	2300      	movs	r3, #0
 8004624:	6063      	str	r3, [r4, #4]
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f043 0308 	orr.w	r3, r3, #8
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	6923      	ldr	r3, [r4, #16]
 8004634:	b94b      	cbnz	r3, 800464a <__swsetup_r+0x7a>
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800463c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004640:	d003      	beq.n	800464a <__swsetup_r+0x7a>
 8004642:	4621      	mov	r1, r4
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f890 	bl	800476a <__smakebuf_r>
 800464a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800464e:	f013 0201 	ands.w	r2, r3, #1
 8004652:	d00a      	beq.n	800466a <__swsetup_r+0x9a>
 8004654:	2200      	movs	r2, #0
 8004656:	60a2      	str	r2, [r4, #8]
 8004658:	6962      	ldr	r2, [r4, #20]
 800465a:	4252      	negs	r2, r2
 800465c:	61a2      	str	r2, [r4, #24]
 800465e:	6922      	ldr	r2, [r4, #16]
 8004660:	b942      	cbnz	r2, 8004674 <__swsetup_r+0xa4>
 8004662:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004666:	d1c5      	bne.n	80045f4 <__swsetup_r+0x24>
 8004668:	bd38      	pop	{r3, r4, r5, pc}
 800466a:	0799      	lsls	r1, r3, #30
 800466c:	bf58      	it	pl
 800466e:	6962      	ldrpl	r2, [r4, #20]
 8004670:	60a2      	str	r2, [r4, #8]
 8004672:	e7f4      	b.n	800465e <__swsetup_r+0x8e>
 8004674:	2000      	movs	r0, #0
 8004676:	e7f7      	b.n	8004668 <__swsetup_r+0x98>
 8004678:	200000b8 	.word	0x200000b8

0800467c <_raise_r>:
 800467c:	291f      	cmp	r1, #31
 800467e:	b538      	push	{r3, r4, r5, lr}
 8004680:	4605      	mov	r5, r0
 8004682:	460c      	mov	r4, r1
 8004684:	d904      	bls.n	8004690 <_raise_r+0x14>
 8004686:	2316      	movs	r3, #22
 8004688:	6003      	str	r3, [r0, #0]
 800468a:	f04f 30ff 	mov.w	r0, #4294967295
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004692:	b112      	cbz	r2, 800469a <_raise_r+0x1e>
 8004694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004698:	b94b      	cbnz	r3, 80046ae <_raise_r+0x32>
 800469a:	4628      	mov	r0, r5
 800469c:	f000 f830 	bl	8004700 <_getpid_r>
 80046a0:	4622      	mov	r2, r4
 80046a2:	4601      	mov	r1, r0
 80046a4:	4628      	mov	r0, r5
 80046a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046aa:	f000 b817 	b.w	80046dc <_kill_r>
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d00a      	beq.n	80046c8 <_raise_r+0x4c>
 80046b2:	1c59      	adds	r1, r3, #1
 80046b4:	d103      	bne.n	80046be <_raise_r+0x42>
 80046b6:	2316      	movs	r3, #22
 80046b8:	6003      	str	r3, [r0, #0]
 80046ba:	2001      	movs	r0, #1
 80046bc:	e7e7      	b.n	800468e <_raise_r+0x12>
 80046be:	2100      	movs	r1, #0
 80046c0:	4620      	mov	r0, r4
 80046c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80046c6:	4798      	blx	r3
 80046c8:	2000      	movs	r0, #0
 80046ca:	e7e0      	b.n	800468e <_raise_r+0x12>

080046cc <raise>:
 80046cc:	4b02      	ldr	r3, [pc, #8]	@ (80046d8 <raise+0xc>)
 80046ce:	4601      	mov	r1, r0
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	f7ff bfd3 	b.w	800467c <_raise_r>
 80046d6:	bf00      	nop
 80046d8:	200000b8 	.word	0x200000b8

080046dc <_kill_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	2300      	movs	r3, #0
 80046e0:	4d06      	ldr	r5, [pc, #24]	@ (80046fc <_kill_r+0x20>)
 80046e2:	4604      	mov	r4, r0
 80046e4:	4608      	mov	r0, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	602b      	str	r3, [r5, #0]
 80046ea:	f7fd fad4 	bl	8001c96 <_kill>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	d102      	bne.n	80046f8 <_kill_r+0x1c>
 80046f2:	682b      	ldr	r3, [r5, #0]
 80046f4:	b103      	cbz	r3, 80046f8 <_kill_r+0x1c>
 80046f6:	6023      	str	r3, [r4, #0]
 80046f8:	bd38      	pop	{r3, r4, r5, pc}
 80046fa:	bf00      	nop
 80046fc:	200006c4 	.word	0x200006c4

08004700 <_getpid_r>:
 8004700:	f7fd bac2 	b.w	8001c88 <_getpid>

08004704 <memchr>:
 8004704:	4603      	mov	r3, r0
 8004706:	b510      	push	{r4, lr}
 8004708:	b2c9      	uxtb	r1, r1
 800470a:	4402      	add	r2, r0
 800470c:	4293      	cmp	r3, r2
 800470e:	4618      	mov	r0, r3
 8004710:	d101      	bne.n	8004716 <memchr+0x12>
 8004712:	2000      	movs	r0, #0
 8004714:	e003      	b.n	800471e <memchr+0x1a>
 8004716:	7804      	ldrb	r4, [r0, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	428c      	cmp	r4, r1
 800471c:	d1f6      	bne.n	800470c <memchr+0x8>
 800471e:	bd10      	pop	{r4, pc}

08004720 <__swhatbuf_r>:
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	460c      	mov	r4, r1
 8004724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004728:	4615      	mov	r5, r2
 800472a:	2900      	cmp	r1, #0
 800472c:	461e      	mov	r6, r3
 800472e:	b096      	sub	sp, #88	@ 0x58
 8004730:	da0c      	bge.n	800474c <__swhatbuf_r+0x2c>
 8004732:	89a3      	ldrh	r3, [r4, #12]
 8004734:	2100      	movs	r1, #0
 8004736:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800473a:	bf14      	ite	ne
 800473c:	2340      	movne	r3, #64	@ 0x40
 800473e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004742:	2000      	movs	r0, #0
 8004744:	6031      	str	r1, [r6, #0]
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	b016      	add	sp, #88	@ 0x58
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	466a      	mov	r2, sp
 800474e:	f000 f849 	bl	80047e4 <_fstat_r>
 8004752:	2800      	cmp	r0, #0
 8004754:	dbed      	blt.n	8004732 <__swhatbuf_r+0x12>
 8004756:	9901      	ldr	r1, [sp, #4]
 8004758:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800475c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004760:	4259      	negs	r1, r3
 8004762:	4159      	adcs	r1, r3
 8004764:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004768:	e7eb      	b.n	8004742 <__swhatbuf_r+0x22>

0800476a <__smakebuf_r>:
 800476a:	898b      	ldrh	r3, [r1, #12]
 800476c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800476e:	079d      	lsls	r5, r3, #30
 8004770:	4606      	mov	r6, r0
 8004772:	460c      	mov	r4, r1
 8004774:	d507      	bpl.n	8004786 <__smakebuf_r+0x1c>
 8004776:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	6123      	str	r3, [r4, #16]
 800477e:	2301      	movs	r3, #1
 8004780:	6163      	str	r3, [r4, #20]
 8004782:	b003      	add	sp, #12
 8004784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004786:	466a      	mov	r2, sp
 8004788:	ab01      	add	r3, sp, #4
 800478a:	f7ff ffc9 	bl	8004720 <__swhatbuf_r>
 800478e:	9f00      	ldr	r7, [sp, #0]
 8004790:	4605      	mov	r5, r0
 8004792:	4639      	mov	r1, r7
 8004794:	4630      	mov	r0, r6
 8004796:	f7ff faaf 	bl	8003cf8 <_malloc_r>
 800479a:	b948      	cbnz	r0, 80047b0 <__smakebuf_r+0x46>
 800479c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047a0:	059a      	lsls	r2, r3, #22
 80047a2:	d4ee      	bmi.n	8004782 <__smakebuf_r+0x18>
 80047a4:	f023 0303 	bic.w	r3, r3, #3
 80047a8:	f043 0302 	orr.w	r3, r3, #2
 80047ac:	81a3      	strh	r3, [r4, #12]
 80047ae:	e7e2      	b.n	8004776 <__smakebuf_r+0xc>
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80047b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ba:	81a3      	strh	r3, [r4, #12]
 80047bc:	9b01      	ldr	r3, [sp, #4]
 80047be:	6020      	str	r0, [r4, #0]
 80047c0:	b15b      	cbz	r3, 80047da <__smakebuf_r+0x70>
 80047c2:	4630      	mov	r0, r6
 80047c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047c8:	f000 f81e 	bl	8004808 <_isatty_r>
 80047cc:	b128      	cbz	r0, 80047da <__smakebuf_r+0x70>
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	f023 0303 	bic.w	r3, r3, #3
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	81a3      	strh	r3, [r4, #12]
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	431d      	orrs	r5, r3
 80047de:	81a5      	strh	r5, [r4, #12]
 80047e0:	e7cf      	b.n	8004782 <__smakebuf_r+0x18>
	...

080047e4 <_fstat_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	2300      	movs	r3, #0
 80047e8:	4d06      	ldr	r5, [pc, #24]	@ (8004804 <_fstat_r+0x20>)
 80047ea:	4604      	mov	r4, r0
 80047ec:	4608      	mov	r0, r1
 80047ee:	4611      	mov	r1, r2
 80047f0:	602b      	str	r3, [r5, #0]
 80047f2:	f7fd faaf 	bl	8001d54 <_fstat>
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	d102      	bne.n	8004800 <_fstat_r+0x1c>
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	b103      	cbz	r3, 8004800 <_fstat_r+0x1c>
 80047fe:	6023      	str	r3, [r4, #0]
 8004800:	bd38      	pop	{r3, r4, r5, pc}
 8004802:	bf00      	nop
 8004804:	200006c4 	.word	0x200006c4

08004808 <_isatty_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	2300      	movs	r3, #0
 800480c:	4d05      	ldr	r5, [pc, #20]	@ (8004824 <_isatty_r+0x1c>)
 800480e:	4604      	mov	r4, r0
 8004810:	4608      	mov	r0, r1
 8004812:	602b      	str	r3, [r5, #0]
 8004814:	f7fd faad 	bl	8001d72 <_isatty>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d102      	bne.n	8004822 <_isatty_r+0x1a>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	b103      	cbz	r3, 8004822 <_isatty_r+0x1a>
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	bd38      	pop	{r3, r4, r5, pc}
 8004824:	200006c4 	.word	0x200006c4

08004828 <_init>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr

08004834 <_fini>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr
